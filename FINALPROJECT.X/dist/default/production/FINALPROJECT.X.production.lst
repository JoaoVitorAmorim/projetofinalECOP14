

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Aug 01 14:06:42 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31  0000                     
    32                           ; Version 2.20
    33                           ; Generated 12/02/2020 GMT
    34                           ; 
    35                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4520 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  000F32                     __pidataCOMRAM:
    69                           	callstack 0
    70                           
    71                           ;initializer for main@F2570
    72  000F32  4A                 	db	74
    73  000F33  4F                 	db	79
    74  000F34  41                 	db	65
    75  000F35  4F                 	db	79
    76  000F36  20                 	db	32
    77  000F37  56                 	db	86
    78  000F38  49                 	db	73
    79  000F39  54                 	db	84
    80  000F3A  4F                 	db	79
    81  000F3B  52                 	db	82
    82  000F3C  00                 	db	0
    83  000F3D  00                 	db	0
    84                           
    85                           ;initializer for main@F2572
    86  000F3E  32                 	db	50
    87  000F3F  30                 	db	48
    88  000F40  31                 	db	49
    89  000F41  39                 	db	57
    90  000F42  30                 	db	48
    91  000F43  30                 	db	48
    92  000F44  30                 	db	48
    93  000F45  37                 	db	55
    94  000F46  32                 	db	50
    95  000F47  34                 	db	52
    96                           
    97                           ;initializer for main@F2568
    98  000F48  20                 	db	32
    99  000F49  20                 	db	32
   100  000F4A  20                 	db	32
   101  000F4B  55                 	db	85
   102  000F4C  4E                 	db	78
   103  000F4D  49                 	db	73
   104  000F4E  46                 	db	70
   105  000F4F  45                 	db	69
   106  000F50  49                 	db	73
   107  0000                     _PORTBbits	set	3969
   108  0000                     _PORTEbits	set	3972
   109  0000                     _TRISE	set	3990
   110  0000                     _TRISD	set	3989
   111  0000                     _TRISC	set	3988
   112  0000                     _TRISB	set	3987
   113  0000                     _TRISA	set	3986
   114  0000                     _PORTE	set	3972
   115  0000                     _PORTD	set	3971
   116  0000                     _PORTC	set	3970
   117  0000                     _PORTB	set	3969
   118  0000                     _PORTA	set	3968
   119  0000                     _PORTCbits	set	3970
   120  0000                     _TRISCbits	set	3988
   121  0000                     _ADRESL	set	4035
   122  0000                     _ADRESH	set	4036
   123  0000                     _ADCON0bits	set	4034
   124  0000                     _ADCON2	set	4032
   125  0000                     _ADCON1	set	4033
   126  0000                     _ADCON0	set	4034
   127                           
   128                           	psect	smallconst
   129  000600                     __psmallconst:
   130                           	callstack 0
   131  000600  00                 	db	0
   132  000601                     STR_2:
   133  000601  4A                 	db	74	;'J'
   134  000602  4F                 	db	79	;'O'
   135  000603  41                 	db	65	;'A'
   136  000604  4F                 	db	79	;'O'
   137  000605  20                 	db	32
   138  000606  56                 	db	86	;'V'
   139  000607  49                 	db	73	;'I'
   140  000608  54                 	db	84	;'T'
   141  000609  4F                 	db	79	;'O'
   142  00060A  52                 	db	82	;'R'
   143  00060B  20                 	db	32
   144  00060C  20                 	db	32
   145  00060D  20                 	db	32
   146  00060E  20                 	db	32
   147  00060F  20                 	db	32
   148  000610  20                 	db	32
   149  000611  00                 	db	0
   150  000612                     STR_3:
   151  000612  52                 	db	82	;'R'
   152  000613  42                 	db	66	;'B'
   153  000614  35                 	db	53	;'5'
   154  000615  20                 	db	32
   155  000616  70                 	db	112	;'p'
   156  000617  61                 	db	97	;'a'
   157  000618  72                 	db	114	;'r'
   158  000619  61                 	db	97	;'a'
   159  00061A  20                 	db	32
   160  00061B  69                 	db	105	;'i'
   161  00061C  6E                 	db	110	;'n'
   162  00061D  69                 	db	105	;'i'
   163  00061E  63                 	db	99	;'c'
   164  00061F  69                 	db	105	;'i'
   165  000620  61                 	db	97	;'a'
   166  000621  72                 	db	114	;'r'
   167  000622  00                 	db	0
   168  000623                     STR_4:
   169  000623  4C                 	db	76	;'L'
   170  000624  6F                 	db	111	;'o'
   171  000625  74                 	db	116	;'t'
   172  000626  65                 	db	101	;'e'
   173  000627  31                 	db	49	;'1'
   174  000628  20                 	db	32
   175  000629  3D                 	db	61	;'='
   176  00062A  00                 	db	0
   177  00062B                     STR_5:
   178  00062B  4C                 	db	76	;'L'
   179  00062C  6F                 	db	111	;'o'
   180  00062D  74                 	db	116	;'t'
   181  00062E  65                 	db	101	;'e'
   182  00062F  32                 	db	50	;'2'
   183  000630  20                 	db	32
   184  000631  3D                 	db	61	;'='
   185  000632  00                 	db	0
   186  000633                     STR_1:
   187  000633  55                 	db	85	;'U'
   188  000634  4E                 	db	78	;'N'
   189  000635  49                 	db	73	;'I'
   190  000636  46                 	db	70	;'F'
   191  000637  45                 	db	69	;'E'
   192  000638  49                 	db	73	;'I'
   193  000639  00                 	db	0
   194  00063A  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           ; #config settings
   197                           
   198                           	psect	cinit
   199  000E8E                     __pcinit:
   200                           	callstack 0
   201  000E8E                     start_initialization:
   202                           	callstack 0
   203  000E8E                     __initialization:
   204                           	callstack 0
   205                           
   206                           ; Initialize objects allocated to COMRAM (31 bytes)
   207                           ; load TBLPTR registers with __pidataCOMRAM
   208  000E8E  0E32               	movlw	low __pidataCOMRAM
   209  000E90  6EF6               	movwf	tblptrl,c
   210  000E92  0E0F               	movlw	high __pidataCOMRAM
   211  000E94  6EF7               	movwf	tblptrh,c
   212  000E96  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   213  000E98  6EF8               	movwf	tblptru,c
   214  000E9A  EE00  F04A         	lfsr	0,__pdataCOMRAM
   215  000E9E  EE10 F01F          	lfsr	1,31
   216  000EA2                     copy_data0:
   217  000EA2  0009               	tblrd		*+
   218  000EA4  CFF5 FFEE          	movff	tablat,postinc0
   219  000EA8  50E5               	movf	postdec1,w,c
   220  000EAA  50E1               	movf	fsr1l,w,c
   221  000EAC  E1FA               	bnz	copy_data0
   222  000EAE                     end_of_initialization:
   223                           	callstack 0
   224  000EAE                     __end_of__initialization:
   225                           	callstack 0
   226  000EAE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   227  000EB0  6EF8               	movwf	tblptru,c
   228  000EB2  0100               	movlb	0
   229  000EB4  EF1E  F003         	goto	_main	;jump to C main() function
   230                           
   231                           	psect	dataCOMRAM
   232  00004A                     __pdataCOMRAM:
   233                           	callstack 0
   234  00004A                     main@F2570:
   235                           	callstack 0
   236  00004A                     	ds	12
   237  000056                     main@F2572:
   238                           	callstack 0
   239  000056                     	ds	10
   240  000060                     main@F2568:
   241                           	callstack 0
   242  000060                     	ds	9
   243                           
   244                           	psect	cstackCOMRAM
   245  000001                     __pcstackCOMRAM:
   246                           	callstack 0
   247  000001                     ?_adc_amostra:
   248                           	callstack 0
   249  000001                     ?___awdiv:
   250                           	callstack 0
   251  000001                     ?___lwmod:
   252                           	callstack 0
   253  000001                     lcd_wr@val:
   254                           	callstack 0
   255  000001                     atraso_ms@valor:
   256                           	callstack 0
   257  000001                     ___awdiv@dividend:
   258                           	callstack 0
   259  000001                     ___lwmod@dividend:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x0
   263  000001                     	ds	2
   264  000003                     ??_adc_amostra:
   265  000003                     atraso_ms@i:
   266                           	callstack 0
   267  000003                     ___awdiv@divisor:
   268                           	callstack 0
   269  000003                     ___lwmod@divisor:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0x2
   273  000003                     	ds	2
   274  000005                     atraso_ms@j:
   275                           	callstack 0
   276  000005                     ___awdiv@counter:
   277                           	callstack 0
   278  000005                     ___lwmod@counter:
   279                           	callstack 0
   280                           
   281                           ; 1 bytes @ 0x4
   282  000005                     	ds	1
   283  000006                     atraso_ms@k:
   284                           	callstack 0
   285  000006                     ___awdiv@sign:
   286                           	callstack 0
   287                           
   288                           ; 1 bytes @ 0x5
   289  000006                     	ds	1
   290  000007                     adc_amostra@canal:
   291                           	callstack 0
   292  000007                     lcd_cmd@val:
   293                           	callstack 0
   294  000007                     lcd_dat@val:
   295                           	callstack 0
   296  000007                     ___awdiv@quotient:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x6
   300  000007                     	ds	1
   301  000008                     ?___wmul:
   302                           	callstack 0
   303  000008                     lcd_str@str:
   304                           	callstack 0
   305  000008                     ___wmul@multiplier:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0x7
   309  000008                     	ds	2
   310  00000A                     ??_lcd_str:
   311  00000A                     ___wmul@multiplicand:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0x9
   315  00000A                     	ds	2
   316  00000C                     lcd_str@i:
   317                           	callstack 0
   318  00000C                     ___wmul@product:
   319                           	callstack 0
   320                           
   321                           ; 2 bytes @ 0xB
   322  00000C                     	ds	2
   323  00000E                     ?___lwdiv:
   324                           	callstack 0
   325  00000E                     ___lwdiv@dividend:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0xD
   329  00000E                     	ds	2
   330  000010                     ___lwdiv@divisor:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0xF
   334  000010                     	ds	2
   335  000012                     ___lwdiv@quotient:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x11
   339  000012                     	ds	2
   340  000014                     ___lwdiv@counter:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x13
   344  000014                     	ds	1
   345  000015                     ??_pwmSet1:
   346  000015                     itoa@val:
   347                           	callstack 0
   348  000015                     itoa1@val1:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x14
   352  000015                     	ds	2
   353  000017                     pwmSet1@porcento:
   354                           	callstack 0
   355  000017                     itoa@str:
   356                           	callstack 0
   357  000017                     itoa1@str1:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x16
   361  000017                     	ds	1
   362  000018                     pwmSet1@val:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x17
   366  000018                     	ds	1
   367  000019                     
   368                           ; 1 bytes @ 0x18
   369  000019                     	ds	1
   370  00001A                     main@text7:
   371                           	callstack 0
   372                           
   373                           ; 12 bytes @ 0x19
   374  00001A                     	ds	12
   375  000026                     main@text8:
   376                           	callstack 0
   377                           
   378                           ; 10 bytes @ 0x25
   379  000026                     	ds	10
   380  000030                     main@text6:
   381                           	callstack 0
   382                           
   383                           ; 9 bytes @ 0x2F
   384  000030                     	ds	9
   385  000039                     main@str1:
   386                           	callstack 0
   387                           
   388                           ; 6 bytes @ 0x38
   389  000039                     	ds	6
   390  00003F                     main@str:
   391                           	callstack 0
   392                           
   393                           ; 6 bytes @ 0x3E
   394  00003F                     	ds	6
   395  000045                     main@tmp1:
   396                           	callstack 0
   397                           
   398                           ; 1 bytes @ 0x44
   399  000045                     	ds	1
   400  000046                     main@tmp2:
   401                           	callstack 0
   402                           
   403                           ; 1 bytes @ 0x45
   404  000046                     	ds	1
   405  000047                     main@temp1:
   406                           	callstack 0
   407                           
   408                           ; 1 bytes @ 0x46
   409  000047                     	ds	1
   410  000048                     main@temp2:
   411                           	callstack 0
   412                           
   413                           ; 1 bytes @ 0x47
   414  000048                     	ds	1
   415  000049                     main@mediaTemp:
   416                           	callstack 0
   417                           
   418                           ; 1 bytes @ 0x48
   419  000049                     	ds	1
   420                           
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 13 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  text7          12   25[COMRAM] unsigned char [12]
   431 ;;  text8          10   37[COMRAM] unsigned char [10]
   432 ;;  text6           9   47[COMRAM] unsigned char [9]
   433 ;;  str             6   62[COMRAM] unsigned char [6]
   434 ;;  str1            6   56[COMRAM] unsigned char [6]
   435 ;;  mediaTemp       1   72[COMRAM] unsigned char 
   436 ;;  temp2           1   71[COMRAM] unsigned char 
   437 ;;  temp1           1   70[COMRAM] unsigned char 
   438 ;;  tmp2            1   69[COMRAM] unsigned char 
   439 ;;  tmp1            1   68[COMRAM] unsigned char 
   440 ;; Return value:  Size  Location     Type
   441 ;;                  1    wreg      void 
   442 ;; Registers used:
   443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   444 ;; Tracked objects:
   445 ;;		On entry : 0/0
   446 ;;		On exit  : 0/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   449 ;;      Params:         0       0       0       0       0       0       0
   450 ;;      Locals:        48       0       0       0       0       0       0
   451 ;;      Temps:          0       0       0       0       0       0       0
   452 ;;      Totals:        48       0       0       0       0       0       0
   453 ;;Total ram usage:       48 bytes
   454 ;; Hardware stack levels required when called: 3
   455 ;; This function calls:
   456 ;;		___awdiv
   457 ;;		___lwdiv
   458 ;;		___wmul
   459 ;;		_adc_amostra
   460 ;;		_adc_init
   461 ;;		_atraso_ms
   462 ;;		_itoa
   463 ;;		_itoa1
   464 ;;		_lcd_cmd
   465 ;;		_lcd_dat
   466 ;;		_lcd_init
   467 ;;		_lcd_str
   468 ;;		_pwmInit
   469 ;;		_pwmSet1
   470 ;; This function is called by:
   471 ;;		Startup code after reset
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475                           	psect	text0
   476  00063C                     __ptext0:
   477                           	callstack 0
   478  00063C                     _main:
   479                           	callstack 28
   480  00063C                     
   481                           ;main.c: 15:     unsigned char tmp1,tmp2;;main.c: 16:     unsigned char temp1, temp2, me
      +                          diaTemp;;main.c: 17:     char str[6];;main.c: 18:     char str1[6];;main.c: 19:     char
      +                           text6[9] = "   UNIFEI";
   482  00063C  EE20  F060         	lfsr	2,main@F2568
   483  000640  EE10  F030         	lfsr	1,main@text6
   484  000644  0E08               	movlw	8
   485  000646                     u1101:
   486  000646  CFDB FFE3          	movff	plusw2,plusw1
   487  00064A  06E8               	decf	wreg,f,c
   488  00064C  E2FC               	bc	u1101
   489                           
   490                           ;main.c: 20:     char text7[12] = "JOAO VITOR";
   491  00064E  EE20  F04A         	lfsr	2,main@F2570
   492  000652  EE10  F01A         	lfsr	1,main@text7
   493  000656  0E0B               	movlw	11
   494  000658                     u1111:
   495  000658  CFDB FFE3          	movff	plusw2,plusw1
   496  00065C  06E8               	decf	wreg,f,c
   497  00065E  E2FC               	bc	u1111
   498                           
   499                           ;main.c: 21:     char text8[10] = "2019000724";
   500  000660  EE20  F056         	lfsr	2,main@F2572
   501  000664  EE10  F026         	lfsr	1,main@text8
   502  000668  0E09               	movlw	9
   503  00066A                     u1121:
   504  00066A  CFDB FFE3          	movff	plusw2,plusw1
   505  00066E  06E8               	decf	wreg,f,c
   506  000670  E2FC               	bc	u1121
   507  000672                     
   508                           ;main.c: 23:     ADCON1 = 0x06;
   509  000672  0E06               	movlw	6
   510  000674  6EC1               	movwf	193,c	;volatile
   511  000676                     
   512                           ;main.c: 24:     TRISA = 0xC3;
   513  000676  0EC3               	movlw	195
   514  000678  6E92               	movwf	146,c	;volatile
   515  00067A                     
   516                           ;main.c: 25:     TRISB = 0xF0;
   517  00067A  0EF0               	movlw	240
   518  00067C  6E93               	movwf	147,c	;volatile
   519  00067E                     
   520                           ;main.c: 26:     TRISC = 0x00;
   521  00067E  0E00               	movlw	0
   522  000680  6E94               	movwf	148,c	;volatile
   523  000682                     
   524                           ;main.c: 27:     TRISD = 0x00;
   525  000682  0E00               	movlw	0
   526  000684  6E95               	movwf	149,c	;volatile
   527  000686                     
   528                           ;main.c: 28:     TRISE = 0x00;
   529  000686  0E00               	movlw	0
   530  000688  6E96               	movwf	150,c	;volatile
   531  00068A                     
   532                           ;main.c: 30:     lcd_init();
   533  00068A  ECF1  F006         	call	_lcd_init	;wreg free
   534  00068E                     
   535                           ;main.c: 31:     adc_init();
   536  00068E  ECB3  F007         	call	_adc_init	;wreg free
   537  000692                     
   538                           ;main.c: 32:     pwmInit();
   539  000692  ECA9  F007         	call	_pwmInit	;wreg free
   540  000696                     
   541                           ;main.c: 34:     lcd_cmd(0x80);
   542  000696  0E80               	movlw	128
   543  000698  EC71  F007         	call	_lcd_cmd
   544  00069C                     
   545                           ;main.c: 35:     lcd_str("UNIFEI");
   546  00069C  0E33               	movlw	low STR_1
   547  00069E  6E08               	movwf	lcd_str@str^0,c
   548  0006A0  0E06               	movlw	high STR_1
   549  0006A2  6E09               	movwf	(lcd_str@str+1)^0,c
   550  0006A4  EC1F  F007         	call	_lcd_str	;wreg free
   551  0006A8                     
   552                           ;main.c: 36:     lcd_cmd(0xC0);
   553  0006A8  0EC0               	movlw	192
   554  0006AA  EC71  F007         	call	_lcd_cmd
   555  0006AE                     
   556                           ;main.c: 37:     lcd_str("JOAO VITOR      ");
   557  0006AE  0E01               	movlw	low STR_2
   558  0006B0  6E08               	movwf	lcd_str@str^0,c
   559  0006B2  0E06               	movlw	high STR_2
   560  0006B4  6E09               	movwf	(lcd_str@str+1)^0,c
   561  0006B6  EC1F  F007         	call	_lcd_str	;wreg free
   562  0006BA                     
   563                           ;main.c: 38:     lcd_str("RB5 para iniciar");
   564  0006BA  0E12               	movlw	low STR_3
   565  0006BC  6E08               	movwf	lcd_str@str^0,c
   566  0006BE  0E06               	movlw	high STR_3
   567  0006C0  6E09               	movwf	(lcd_str@str+1)^0,c
   568  0006C2  EC1F  F007         	call	_lcd_str	;wreg free
   569  0006C6                     l219:
   570  0006C6  BA81               	btfsc	129,5,c	;volatile
   571  0006C8  EF68  F003         	goto	u1131
   572  0006CC  EF6A  F003         	goto	u1130
   573  0006D0                     u1131:
   574  0006D0  EF63  F003         	goto	l219
   575  0006D4                     u1130:
   576  0006D4                     
   577                           ;main.c: 40:     lcd_cmd(0x01);
   578  0006D4  0E01               	movlw	1
   579  0006D6  EC71  F007         	call	_lcd_cmd
   580                           
   581                           ;main.c: 41:     lcd_cmd(0x80);
   582  0006DA  0E80               	movlw	128
   583  0006DC  EC71  F007         	call	_lcd_cmd
   584  0006E0                     
   585                           ;main.c: 42:     lcd_str("Lote1 =");
   586  0006E0  0E23               	movlw	low STR_4
   587  0006E2  6E08               	movwf	lcd_str@str^0,c
   588  0006E4  0E06               	movlw	high STR_4
   589  0006E6  6E09               	movwf	(lcd_str@str+1)^0,c
   590  0006E8  EC1F  F007         	call	_lcd_str	;wreg free
   591  0006EC                     
   592                           ;main.c: 43:     lcd_cmd(0xC0);
   593  0006EC  0EC0               	movlw	192
   594  0006EE  EC71  F007         	call	_lcd_cmd
   595                           
   596                           ;main.c: 44:     lcd_str("Lote2 =");
   597  0006F2  0E2B               	movlw	low STR_5
   598  0006F4  6E08               	movwf	lcd_str@str^0,c
   599  0006F6  0E06               	movlw	high STR_5
   600  0006F8  6E09               	movwf	(lcd_str@str+1)^0,c
   601  0006FA  EC1F  F007         	call	_lcd_str	;wreg free
   602  0006FE                     l1713:
   603                           
   604                           ;main.c: 47:         tmp1 = (adc_amostra(0)*10) / 204;
   605  0006FE  0E00               	movlw	0
   606  000700  ECD5  F005         	call	_adc_amostra
   607  000704  C001  F008         	movff	?_adc_amostra,___wmul@multiplier
   608  000708  C002  F009         	movff	?_adc_amostra+1,___wmul@multiplier+1
   609  00070C  0E00               	movlw	0
   610  00070E  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
   611  000710  0E0A               	movlw	10
   612  000712  6E0A               	movwf	___wmul@multiplicand^0,c
   613  000714  EC86  F007         	call	___wmul	;wreg free
   614  000718  C008  F00E         	movff	?___wmul,___lwdiv@dividend
   615  00071C  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
   616  000720  0E00               	movlw	0
   617  000722  6E11               	movwf	(___lwdiv@divisor+1)^0,c
   618  000724  0ECC               	movlw	204
   619  000726  6E10               	movwf	___lwdiv@divisor^0,c
   620  000728  EC1D  F006         	call	___lwdiv	;wreg free
   621  00072C  500E               	movf	?___lwdiv^0,w,c
   622  00072E  6E45               	movwf	main@tmp1^0,c
   623  000730                     
   624                           ;main.c: 48:         tmp2 = (adc_amostra(2)*10) / 204;
   625  000730  0E02               	movlw	2
   626  000732  ECD5  F005         	call	_adc_amostra
   627  000736  C001  F008         	movff	?_adc_amostra,___wmul@multiplier
   628  00073A  C002  F009         	movff	?_adc_amostra+1,___wmul@multiplier+1
   629  00073E  0E00               	movlw	0
   630  000740  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
   631  000742  0E0A               	movlw	10
   632  000744  6E0A               	movwf	___wmul@multiplicand^0,c
   633  000746  EC86  F007         	call	___wmul	;wreg free
   634  00074A  C008  F00E         	movff	?___wmul,___lwdiv@dividend
   635  00074E  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
   636  000752  0E00               	movlw	0
   637  000754  6E11               	movwf	(___lwdiv@divisor+1)^0,c
   638  000756  0ECC               	movlw	204
   639  000758  6E10               	movwf	___lwdiv@divisor^0,c
   640  00075A  EC1D  F006         	call	___lwdiv	;wreg free
   641  00075E  500E               	movf	?___lwdiv^0,w,c
   642  000760  6E46               	movwf	main@tmp2^0,c
   643  000762                     
   644                           ;main.c: 49:         lcd_cmd(0x80 + 9);
   645  000762  0E89               	movlw	137
   646  000764  EC71  F007         	call	_lcd_cmd
   647  000768                     
   648                           ;main.c: 50:         itoa(tmp1, str);
   649  000768  C045  F015         	movff	main@tmp1,itoa@val
   650  00076C  6A16               	clrf	(itoa@val+1)^0,c
   651  00076E  0E3F               	movlw	low main@str
   652  000770  6E17               	movwf	itoa@str^0,c
   653  000772  0E00               	movlw	high main@str
   654  000774  6E18               	movwf	(itoa@str+1)^0,c
   655  000776  ECEF  F004         	call	_itoa	;wreg free
   656  00077A                     
   657                           ;main.c: 51:         itoa1(tmp2, str1);
   658  00077A  C046  F015         	movff	main@tmp2,itoa1@val1
   659  00077E  6A16               	clrf	(itoa1@val1+1)^0,c
   660  000780  0E39               	movlw	low main@str1
   661  000782  6E17               	movwf	itoa1@str1^0,c
   662  000784  0E00               	movlw	high main@str1
   663  000786  6E18               	movwf	(itoa1@str1+1)^0,c
   664  000788  EC6B  F004         	call	_itoa1	;wreg free
   665  00078C                     
   666                           ;main.c: 52:         temp1 = str[3];
   667  00078C  C042  F047         	movff	main@str+3,main@temp1
   668  000790                     
   669                           ;main.c: 53:         temp2 = str1[3];
   670  000790  C03C  F048         	movff	main@str1+3,main@temp2
   671  000794                     
   672                           ;main.c: 54:         mediaTemp = ((temp1 + temp2) / 2);
   673  000794  5047               	movf	main@temp1^0,w,c
   674  000796  2448               	addwf	main@temp2^0,w,c
   675  000798  6E01               	movwf	___awdiv@dividend^0,c
   676  00079A  6A02               	clrf	(___awdiv@dividend+1)^0,c
   677  00079C  3602               	rlcf	(___awdiv@dividend+1)^0,f,c
   678  00079E  0E00               	movlw	0
   679  0007A0  6E04               	movwf	(___awdiv@divisor+1)^0,c
   680  0007A2  0E02               	movlw	2
   681  0007A4  6E03               	movwf	___awdiv@divisor^0,c
   682  0007A6  EC73  F005         	call	___awdiv	;wreg free
   683  0007AA  5001               	movf	?___awdiv^0,w,c
   684  0007AC  6E49               	movwf	main@mediaTemp^0,c
   685  0007AE                     
   686                           ;main.c: 56:         if (mediaTemp <= 50 && mediaTemp >= 49) pwmSet1(32);
   687  0007AE  0E33               	movlw	51
   688  0007B0  6049               	cpfslt	main@mediaTemp^0,c
   689  0007B2  EFDD  F003         	goto	u1141
   690  0007B6  EFDF  F003         	goto	u1140
   691  0007BA                     u1141:
   692  0007BA  EFEA  F003         	goto	l1735
   693  0007BE                     u1140:
   694  0007BE  0E30               	movlw	48
   695  0007C0  6449               	cpfsgt	main@mediaTemp^0,c
   696  0007C2  EFE5  F003         	goto	u1151
   697  0007C6  EFE7  F003         	goto	u1150
   698  0007CA                     u1151:
   699  0007CA  EFEA  F003         	goto	l1735
   700  0007CE                     u1150:
   701  0007CE  0E20               	movlw	32
   702  0007D0  EC57  F006         	call	_pwmSet1
   703  0007D4                     l1735:
   704                           
   705                           ;main.c: 57:         if (mediaTemp <= 52 && mediaTemp > 50) pwmSet1(64);
   706  0007D4  0E35               	movlw	53
   707  0007D6  6049               	cpfslt	main@mediaTemp^0,c
   708  0007D8  EFF0  F003         	goto	u1161
   709  0007DC  EFF2  F003         	goto	u1160
   710  0007E0                     u1161:
   711  0007E0  EFFD  F003         	goto	l1741
   712  0007E4                     u1160:
   713  0007E4  0E32               	movlw	50
   714  0007E6  6449               	cpfsgt	main@mediaTemp^0,c
   715  0007E8  EFF8  F003         	goto	u1171
   716  0007EC  EFFA  F003         	goto	u1170
   717  0007F0                     u1171:
   718  0007F0  EFFD  F003         	goto	l1741
   719  0007F4                     u1170:
   720  0007F4  0E40               	movlw	64
   721  0007F6  EC57  F006         	call	_pwmSet1
   722  0007FA                     l1741:
   723                           
   724                           ;main.c: 58:         if (mediaTemp <= 53 && mediaTemp > 52) pwmSet1(92);
   725  0007FA  0E36               	movlw	54
   726  0007FC  6049               	cpfslt	main@mediaTemp^0,c
   727  0007FE  EF03  F004         	goto	u1181
   728  000802  EF05  F004         	goto	u1180
   729  000806                     u1181:
   730  000806  EF10  F004         	goto	l1747
   731  00080A                     u1180:
   732  00080A  0E34               	movlw	52
   733  00080C  6449               	cpfsgt	main@mediaTemp^0,c
   734  00080E  EF0B  F004         	goto	u1191
   735  000812  EF0D  F004         	goto	u1190
   736  000816                     u1191:
   737  000816  EF10  F004         	goto	l1747
   738  00081A                     u1190:
   739  00081A  0E5C               	movlw	92
   740  00081C  EC57  F006         	call	_pwmSet1
   741  000820                     l1747:
   742                           
   743                           ;main.c: 59:         if (mediaTemp == 48) pwmSet1(0);
   744  000820  0E30               	movlw	48
   745  000822  1849               	xorwf	main@mediaTemp^0,w,c
   746  000824  A4D8               	btfss	status,2,c
   747  000826  EF17  F004         	goto	u1201
   748  00082A  EF19  F004         	goto	u1200
   749  00082E                     u1201:
   750  00082E  EF1C  F004         	goto	l1751
   751  000832                     u1200:
   752  000832  0E00               	movlw	0
   753  000834  EC57  F006         	call	_pwmSet1
   754  000838                     l1751:
   755                           
   756                           ;main.c: 61:         if (temp1 >= 50) {
   757  000838  0E31               	movlw	49
   758  00083A  6447               	cpfsgt	main@temp1^0,c
   759  00083C  EF22  F004         	goto	u1211
   760  000840  EF24  F004         	goto	u1210
   761  000844                     u1211:
   762  000844  EF25  F004         	goto	l1755
   763  000848                     u1210:
   764  000848                     
   765                           ;main.c: 62:             ((PORTB) |= (1<<1));
   766  000848  8281               	bsf	129,1,c	;volatile
   767  00084A                     l1755:
   768                           
   769                           ;main.c: 64:         if (temp1 < 50) {
   770  00084A  0E32               	movlw	50
   771  00084C  6047               	cpfslt	main@temp1^0,c
   772  00084E  EF2B  F004         	goto	u1221
   773  000852  EF2D  F004         	goto	u1220
   774  000856                     u1221:
   775  000856  EF2E  F004         	goto	l1759
   776  00085A                     u1220:
   777  00085A                     
   778                           ;main.c: 65:             ((PORTB) &= ~(1<<1));
   779  00085A  9281               	bcf	129,1,c	;volatile
   780  00085C                     l1759:
   781                           
   782                           ;main.c: 68:         if (temp2 >= 50) {
   783  00085C  0E31               	movlw	49
   784  00085E  6448               	cpfsgt	main@temp2^0,c
   785  000860  EF34  F004         	goto	u1231
   786  000864  EF36  F004         	goto	u1230
   787  000868                     u1231:
   788  000868  EF37  F004         	goto	l1763
   789  00086C                     u1230:
   790  00086C                     
   791                           ;main.c: 69:             ((PORTB) |= (1<<2));
   792  00086C  8481               	bsf	129,2,c	;volatile
   793  00086E                     l1763:
   794                           
   795                           ;main.c: 71:         if (temp2 < 50) {
   796  00086E  0E32               	movlw	50
   797  000870  6048               	cpfslt	main@temp2^0,c
   798  000872  EF3D  F004         	goto	u1241
   799  000876  EF3F  F004         	goto	u1240
   800  00087A                     u1241:
   801  00087A  EF40  F004         	goto	l1767
   802  00087E                     u1240:
   803  00087E                     
   804                           ;main.c: 72:             ((PORTB) &= ~(1<<2));
   805  00087E  9481               	bcf	129,2,c	;volatile
   806  000880                     l1767:
   807                           
   808                           ;main.c: 77:         lcd_dat(temp1);
   809  000880  5047               	movf	main@temp1^0,w,c
   810  000882  EC5C  F007         	call	_lcd_dat
   811  000886                     
   812                           ;main.c: 78:         lcd_dat(str[4]);
   813  000886  5043               	movf	(main@str+4)^0,w,c
   814  000888  EC5C  F007         	call	_lcd_dat
   815  00088C                     
   816                           ;main.c: 79:         lcd_dat(223);
   817  00088C  0EDF               	movlw	223
   818  00088E  EC5C  F007         	call	_lcd_dat
   819  000892                     
   820                           ;main.c: 80:         lcd_dat(' ');
   821  000892  0E20               	movlw	32
   822  000894  EC5C  F007         	call	_lcd_dat
   823  000898                     
   824                           ;main.c: 81:         lcd_dat(mediaTemp);
   825  000898  5049               	movf	main@mediaTemp^0,w,c
   826  00089A  EC5C  F007         	call	_lcd_dat
   827  00089E                     
   828                           ;main.c: 82:         lcd_dat(str[4]);
   829  00089E  5043               	movf	(main@str+4)^0,w,c
   830  0008A0  EC5C  F007         	call	_lcd_dat
   831  0008A4                     
   832                           ;main.c: 83:         lcd_dat(223);
   833  0008A4  0EDF               	movlw	223
   834  0008A6  EC5C  F007         	call	_lcd_dat
   835  0008AA                     
   836                           ;main.c: 84:         lcd_cmd(0xC0 + 9);
   837  0008AA  0EC9               	movlw	201
   838  0008AC  EC71  F007         	call	_lcd_cmd
   839  0008B0                     
   840                           ;main.c: 85:         lcd_dat(temp2);
   841  0008B0  5048               	movf	main@temp2^0,w,c
   842  0008B2  EC5C  F007         	call	_lcd_dat
   843  0008B6                     
   844                           ;main.c: 86:         lcd_dat(str[4]);
   845  0008B6  5043               	movf	(main@str+4)^0,w,c
   846  0008B8  EC5C  F007         	call	_lcd_dat
   847  0008BC                     
   848                           ;main.c: 87:         lcd_dat(223);
   849  0008BC  0EDF               	movlw	223
   850  0008BE  EC5C  F007         	call	_lcd_dat
   851  0008C2                     
   852                           ;main.c: 88:         atraso_ms(10);
   853  0008C2  0E00               	movlw	0
   854  0008C4  6E02               	movwf	(atraso_ms@valor+1)^0,c
   855  0008C6  0E0A               	movlw	10
   856  0008C8  6E01               	movwf	atraso_ms@valor^0,c
   857  0008CA  EC8D  F006         	call	_atraso_ms	;wreg free
   858  0008CE  EF7F  F003         	goto	l1713
   859  0008D2  EF00  F000         	goto	start
   860  0008D6                     __end_of_main:
   861                           	callstack 0
   862                           
   863 ;; *************** function _pwmSet1 *****************
   864 ;; Defined at:
   865 ;;		line 23 in file "pwm.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;  porcento        1    wreg     unsigned char 
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  porcento        1   22[COMRAM] unsigned char 
   870 ;;  val             2   23[COMRAM] unsigned int 
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   880 ;;      Params:         0       0       0       0       0       0       0
   881 ;;      Locals:         3       0       0       0       0       0       0
   882 ;;      Temps:          2       0       0       0       0       0       0
   883 ;;      Totals:         5       0       0       0       0       0       0
   884 ;;Total ram usage:        5 bytes
   885 ;; Hardware stack levels used: 1
   886 ;; Hardware stack levels required when called: 1
   887 ;; This function calls:
   888 ;;		___lwdiv
   889 ;;		___wmul
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text1
   896  000CAE                     __ptext1:
   897                           	callstack 0
   898  000CAE                     _pwmSet1:
   899                           	callstack 29
   900                           
   901                           ;incstack = 0
   902                           ;pwmSet1@porcento stored from wreg
   903  000CAE  6E17               	movwf	pwmSet1@porcento^0,c
   904  000CB0                     
   905                           ;pwm.c: 23: void pwmSet1(unsigned char porcento);pwm.c: 24: {;pwm.c: 30:  unsigned int v
      +                          al = ((unsigned int)porcento) *((*(volatile __near unsigned char*)0xFCB)+1);
   906  000CB0  0E01               	movlw	1
   907  000CB2  24CB               	addwf	203,w,c	;volatile
   908  000CB4  6E08               	movwf	___wmul@multiplier^0,c
   909  000CB6  6A09               	clrf	(___wmul@multiplier+1)^0,c
   910  000CB8  0E00               	movlw	0
   911  000CBA  2209               	addwfc	(___wmul@multiplier+1)^0,f,c
   912  000CBC  C017  F00A         	movff	pwmSet1@porcento,___wmul@multiplicand
   913  000CC0  6A0B               	clrf	(___wmul@multiplicand+1)^0,c
   914  000CC2  EC86  F007         	call	___wmul	;wreg free
   915  000CC6  C008  F018         	movff	?___wmul,pwmSet1@val
   916  000CCA  C009  F019         	movff	?___wmul+1,pwmSet1@val+1
   917  000CCE                     
   918                           ;pwm.c: 31:  val = val / 25;
   919  000CCE  C018  F00E         	movff	pwmSet1@val,___lwdiv@dividend
   920  000CD2  C019  F00F         	movff	pwmSet1@val+1,___lwdiv@dividend+1
   921  000CD6  0E00               	movlw	0
   922  000CD8  6E11               	movwf	(___lwdiv@divisor+1)^0,c
   923  000CDA  0E19               	movlw	25
   924  000CDC  6E10               	movwf	___lwdiv@divisor^0,c
   925  000CDE  EC1D  F006         	call	___lwdiv	;wreg free
   926  000CE2  C00E  F018         	movff	?___lwdiv,pwmSet1@val
   927  000CE6  C00F  F019         	movff	?___lwdiv+1,pwmSet1@val+1
   928  000CEA                     
   929                           ;pwm.c: 33:  val &= 0x03ff;
   930  000CEA  0EFF               	movlw	255
   931  000CEC  1618               	andwf	pwmSet1@val^0,f,c
   932  000CEE  0E03               	movlw	3
   933  000CF0  1619               	andwf	(pwmSet1@val+1)^0,f,c
   934  000CF2                     
   935                           ;pwm.c: 35:  (*(volatile __near unsigned char*)0xFBE) = val >> 2;
   936  000CF2  C018  F015         	movff	pwmSet1@val,??_pwmSet1
   937  000CF6  C019  F016         	movff	pwmSet1@val+1,??_pwmSet1+1
   938  000CFA  90D8               	bcf	status,0,c
   939  000CFC  3216               	rrcf	(??_pwmSet1+1)^0,f,c
   940  000CFE  3215               	rrcf	??_pwmSet1^0,f,c
   941  000D00  90D8               	bcf	status,0,c
   942  000D02  3216               	rrcf	(??_pwmSet1+1)^0,f,c
   943  000D04  3215               	rrcf	??_pwmSet1^0,f,c
   944  000D06  5015               	movf	??_pwmSet1^0,w,c
   945  000D08  6EBE               	movwf	190,c	;volatile
   946  000D0A                     
   947                           ;pwm.c: 37:  (*(volatile __near unsigned char*)0xFBD) |= (val & 0x0003) << 4;
   948  000D0A  C018  F015         	movff	pwmSet1@val,??_pwmSet1
   949  000D0E  0E03               	movlw	3
   950  000D10  1615               	andwf	??_pwmSet1^0,f,c
   951  000D12  3815               	swapf	??_pwmSet1^0,w,c
   952  000D14  0BF0               	andlw	240
   953  000D16  12BD               	iorwf	189,f,c	;volatile
   954  000D18  0012               	return		;funcret
   955  000D1A                     __end_of_pwmSet1:
   956                           	callstack 0
   957                           
   958 ;; *************** function ___wmul *****************
   959 ;; Defined at:
   960 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;  multiplier      2    7[COMRAM] unsigned int 
   963 ;;  multiplicand    2    9[COMRAM] unsigned int 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  product         2   11[COMRAM] unsigned int 
   966 ;; Return value:  Size  Location     Type
   967 ;;                  2    7[COMRAM] unsigned int 
   968 ;; Registers used:
   969 ;;		wreg, status,2, status,0, prodl, prodh
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   975 ;;      Params:         4       0       0       0       0       0       0
   976 ;;      Locals:         2       0       0       0       0       0       0
   977 ;;      Temps:          0       0       0       0       0       0       0
   978 ;;      Totals:         6       0       0       0       0       0       0
   979 ;;Total ram usage:        6 bytes
   980 ;; Hardware stack levels used: 1
   981 ;; This function calls:
   982 ;;		Nothing
   983 ;; This function is called by:
   984 ;;		_main
   985 ;;		_pwmSet1
   986 ;;		_pwmSet2
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text2
   991  000F0C                     __ptext2:
   992                           	callstack 0
   993  000F0C                     ___wmul:
   994                           	callstack 29
   995  000F0C  5008               	movf	___wmul@multiplier^0,w,c
   996  000F0E  020A               	mulwf	___wmul@multiplicand^0,c
   997  000F10  CFF3 F00C          	movff	prodl,___wmul@product
   998  000F14  CFF4 F00D          	movff	prodh,___wmul@product+1
   999  000F18  5008               	movf	___wmul@multiplier^0,w,c
  1000  000F1A  020B               	mulwf	(___wmul@multiplicand+1)^0,c
  1001  000F1C  50F3               	movf	243,w,c
  1002  000F1E  260D               	addwf	(___wmul@product+1)^0,f,c
  1003  000F20  5009               	movf	(___wmul@multiplier+1)^0,w,c
  1004  000F22  020A               	mulwf	___wmul@multiplicand^0,c
  1005  000F24  50F3               	movf	243,w,c
  1006  000F26  260D               	addwf	(___wmul@product+1)^0,f,c
  1007  000F28  C00C  F008         	movff	___wmul@product,?___wmul
  1008  000F2C  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  1009  000F30  0012               	return		;funcret
  1010  000F32                     __end_of___wmul:
  1011                           	callstack 0
  1012                           
  1013 ;; *************** function _pwmInit *****************
  1014 ;; Defined at:
  1015 ;;		line 59 in file "pwm.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;		None
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, status,2, status,0
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1029 ;;      Params:         0       0       0       0       0       0       0
  1030 ;;      Locals:         0       0       0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0       0       0
  1032 ;;      Totals:         0       0       0       0       0       0       0
  1033 ;;Total ram usage:        0 bytes
  1034 ;; Hardware stack levels used: 1
  1035 ;; This function calls:
  1036 ;;		Nothing
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text3
  1043  000F52                     __ptext3:
  1044                           	callstack 0
  1045  000F52                     _pwmInit:
  1046                           	callstack 30
  1047  000F52                     
  1048                           ;pwm.c: 61:  (((*(volatile __near unsigned char*)0xF94)) &= ~(1<<1));
  1049  000F52  9294               	bcf	148,1,c	;volatile
  1050                           
  1051                           ;pwm.c: 62:  (((*(volatile __near unsigned char*)0xF94)) &= ~(1<<2));
  1052  000F54  9494               	bcf	148,2,c	;volatile
  1053  000F56                     
  1054                           ;pwm.c: 64:  (*(volatile __near unsigned char*)0xFCA) |= 0b00000011;
  1055  000F56  0E03               	movlw	3
  1056  000F58  12CA               	iorwf	202,f,c	;volatile
  1057  000F5A                     
  1058                           ;pwm.c: 65:  (((*(volatile __near unsigned char*)0xFCA)) |= (1<<2));
  1059  000F5A  84CA               	bsf	202,2,c	;volatile
  1060                           
  1061                           ;pwm.c: 68:  (*(volatile __near unsigned char*)0xFBD) |= 0b00001100;
  1062  000F5C  0E0C               	movlw	12
  1063  000F5E  12BD               	iorwf	189,f,c	;volatile
  1064                           
  1065                           ;pwm.c: 69:  (*(volatile __near unsigned char*)0xFBA) |= 0b00001100;
  1066  000F60  0E0C               	movlw	12
  1067  000F62  12BA               	iorwf	186,f,c	;volatile
  1068  000F64  0012               	return		;funcret
  1069  000F66                     __end_of_pwmInit:
  1070                           	callstack 0
  1071                           
  1072 ;; *************** function _lcd_str *****************
  1073 ;; Defined at:
  1074 ;;		line 76 in file "lcd.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;  str             2    7[COMRAM] PTR const unsigned char 
  1077 ;;		 -> STR_5(8), STR_4(8), STR_3(17), STR_2(17), 
  1078 ;;		 -> STR_1(7), 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;  i               1   11[COMRAM] unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      void 
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1090 ;;      Params:         2       0       0       0       0       0       0
  1091 ;;      Locals:         1       0       0       0       0       0       0
  1092 ;;      Temps:          2       0       0       0       0       0       0
  1093 ;;      Totals:         5       0       0       0       0       0       0
  1094 ;;Total ram usage:        5 bytes
  1095 ;; Hardware stack levels used: 1
  1096 ;; Hardware stack levels required when called: 2
  1097 ;; This function calls:
  1098 ;;		_lcd_dat
  1099 ;; This function is called by:
  1100 ;;		_main
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text4
  1105  000E3E                     __ptext4:
  1106                           	callstack 0
  1107  000E3E                     _lcd_str:
  1108                           	callstack 28
  1109  000E3E                     
  1110                           ;lcd.c: 76: void lcd_str(const char* str);lcd.c: 77: {;lcd.c: 78:  unsigned char i=0;
  1111  000E3E  0E00               	movlw	0
  1112  000E40  6E0C               	movwf	lcd_str@i^0,c
  1113                           
  1114                           ;lcd.c: 80:  while(str[i] != 0 )
  1115  000E42  EF32  F007         	goto	l1613
  1116  000E46                     l1609:
  1117                           
  1118                           ;lcd.c: 81:  {;lcd.c: 82:    lcd_dat(str[i]);
  1119  000E46  500C               	movf	lcd_str@i^0,w,c
  1120  000E48  2408               	addwf	lcd_str@str^0,w,c
  1121  000E4A  6E0A               	movwf	??_lcd_str^0,c
  1122  000E4C  0E00               	movlw	0
  1123  000E4E  2009               	addwfc	(lcd_str@str+1)^0,w,c
  1124  000E50  6E0B               	movwf	(??_lcd_str+1)^0,c
  1125  000E52  C00A  FFF6         	movff	??_lcd_str,tblptrl
  1126  000E56  C00B  FFF7         	movff	??_lcd_str+1,tblptrh
  1127  000E5A                     	if	0	;tblptru may be non-zero
  1128  000E5A                     	endif
  1129  000E5A                     	if	0	;tblptru may be non-zero
  1130  000E5A                     	endif
  1131  000E5A  0008               	tblrd		*
  1132  000E5C  50F5               	movf	tablat,w,c
  1133  000E5E  EC5C  F007         	call	_lcd_dat
  1134  000E62                     
  1135                           ;lcd.c: 83:    i++;
  1136  000E62  2A0C               	incf	lcd_str@i^0,f,c
  1137  000E64                     l1613:
  1138                           
  1139                           ;lcd.c: 80:  while(str[i] != 0 )
  1140  000E64  500C               	movf	lcd_str@i^0,w,c
  1141  000E66  2408               	addwf	lcd_str@str^0,w,c
  1142  000E68  6E0A               	movwf	??_lcd_str^0,c
  1143  000E6A  0E00               	movlw	0
  1144  000E6C  2009               	addwfc	(lcd_str@str+1)^0,w,c
  1145  000E6E  6E0B               	movwf	(??_lcd_str+1)^0,c
  1146  000E70  C00A  FFF6         	movff	??_lcd_str,tblptrl
  1147  000E74  C00B  FFF7         	movff	??_lcd_str+1,tblptrh
  1148  000E78                     	if	0	;tblptru may be non-zero
  1149  000E78                     	endif
  1150  000E78                     	if	0	;tblptru may be non-zero
  1151  000E78                     	endif
  1152  000E78  0008               	tblrd		*
  1153  000E7A  50F5               	movf	tablat,w,c
  1154  000E7C  0900               	iorlw	0
  1155  000E7E  A4D8               	btfss	status,2,c
  1156  000E80  EF44  F007         	goto	u1031
  1157  000E84  EF46  F007         	goto	u1030
  1158  000E88                     u1031:
  1159  000E88  EF23  F007         	goto	l1609
  1160  000E8C                     u1030:
  1161  000E8C  0012               	return		;funcret
  1162  000E8E                     __end_of_lcd_str:
  1163                           	callstack 0
  1164                           
  1165 ;; *************** function _lcd_dat *****************
  1166 ;; Defined at:
  1167 ;;		line 46 in file "lcd.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;  val             1    wreg     unsigned char 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  val             1    6[COMRAM] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      void 
  1174 ;; Registers used:
  1175 ;;		wreg, status,2, status,0, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1181 ;;      Params:         0       0       0       0       0       0       0
  1182 ;;      Locals:         1       0       0       0       0       0       0
  1183 ;;      Temps:          0       0       0       0       0       0       0
  1184 ;;      Totals:         1       0       0       0       0       0       0
  1185 ;;Total ram usage:        1 bytes
  1186 ;; Hardware stack levels used: 1
  1187 ;; Hardware stack levels required when called: 1
  1188 ;; This function calls:
  1189 ;;		_atraso_ms
  1190 ;;		_lcd_wr
  1191 ;; This function is called by:
  1192 ;;		_lcd_str
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text5
  1198  000EB8                     __ptext5:
  1199                           	callstack 0
  1200  000EB8                     _lcd_dat:
  1201                           	callstack 28
  1202                           
  1203                           ;incstack = 0
  1204                           ;lcd_dat@val stored from wreg
  1205  000EB8  6E07               	movwf	lcd_dat@val^0,c
  1206  000EBA                     
  1207                           ;lcd.c: 46: void lcd_dat(unsigned char val);lcd.c: 47: {;lcd.c: 48:  PORTEbits.RE1=1;
  1208  000EBA  8284               	bsf	132,1,c	;volatile
  1209  000EBC                     
  1210                           ;lcd.c: 49:         lcd_wr(val);
  1211  000EBC  5007               	movf	lcd_dat@val^0,w,c
  1212  000EBE  ECBA  F007         	call	_lcd_wr
  1213  000EC2                     
  1214                           ;lcd.c: 50:         PORTEbits.RE2=1;
  1215  000EC2  8484               	bsf	132,2,c	;volatile
  1216  000EC4                     
  1217                           ;lcd.c: 51:         atraso_ms(3);
  1218  000EC4  0E00               	movlw	0
  1219  000EC6  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1220  000EC8  0E03               	movlw	3
  1221  000ECA  6E01               	movwf	atraso_ms@valor^0,c
  1222  000ECC  EC8D  F006         	call	_atraso_ms	;wreg free
  1223  000ED0                     
  1224                           ;lcd.c: 52:         PORTEbits.RE1=0;
  1225  000ED0  9284               	bcf	132,1,c	;volatile
  1226  000ED2                     
  1227                           ;lcd.c: 53:         atraso_ms(3);
  1228  000ED2  0E00               	movlw	0
  1229  000ED4  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1230  000ED6  0E03               	movlw	3
  1231  000ED8  6E01               	movwf	atraso_ms@valor^0,c
  1232  000EDA  EC8D  F006         	call	_atraso_ms	;wreg free
  1233  000EDE                     
  1234                           ;lcd.c: 54:  PORTEbits.RE1=1;
  1235  000EDE  8284               	bsf	132,1,c	;volatile
  1236  000EE0  0012               	return		;funcret
  1237  000EE2                     __end_of_lcd_dat:
  1238                           	callstack 0
  1239                           
  1240 ;; *************** function _lcd_init *****************
  1241 ;; Defined at:
  1242 ;;		line 57 in file "lcd.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, status,0, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1256 ;;      Params:         0       0       0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0
  1259 ;;      Totals:         0       0       0       0       0       0       0
  1260 ;;Total ram usage:        0 bytes
  1261 ;; Hardware stack levels used: 1
  1262 ;; Hardware stack levels required when called: 2
  1263 ;; This function calls:
  1264 ;;		_atraso_ms
  1265 ;;		_lcd_cmd
  1266 ;; This function is called by:
  1267 ;;		_main
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           	psect	text6
  1272  000DE2                     __ptext6:
  1273                           	callstack 0
  1274  000DE2                     _lcd_init:
  1275                           	callstack 28
  1276  000DE2                     
  1277                           ;lcd.c: 59:  PORTEbits.RE1=0;
  1278  000DE2  9284               	bcf	132,1,c	;volatile
  1279                           
  1280                           ;lcd.c: 60:  PORTEbits.RE2=0;
  1281  000DE4  9484               	bcf	132,2,c	;volatile
  1282  000DE6                     
  1283                           ;lcd.c: 61:  atraso_ms(20);
  1284  000DE6  0E00               	movlw	0
  1285  000DE8  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1286  000DEA  0E14               	movlw	20
  1287  000DEC  6E01               	movwf	atraso_ms@valor^0,c
  1288  000DEE  EC8D  F006         	call	_atraso_ms	;wreg free
  1289  000DF2                     
  1290                           ;lcd.c: 62:  PORTEbits.RE1=1;
  1291  000DF2  8284               	bsf	132,1,c	;volatile
  1292                           
  1293                           ;lcd.c: 64:  lcd_cmd(0x38);
  1294  000DF4  0E38               	movlw	56
  1295  000DF6  EC71  F007         	call	_lcd_cmd
  1296                           
  1297                           ;lcd.c: 65:  atraso_ms(5);
  1298  000DFA  0E00               	movlw	0
  1299  000DFC  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1300  000DFE  0E05               	movlw	5
  1301  000E00  6E01               	movwf	atraso_ms@valor^0,c
  1302  000E02  EC8D  F006         	call	_atraso_ms	;wreg free
  1303                           
  1304                           ;lcd.c: 66:  lcd_cmd(0x38);
  1305  000E06  0E38               	movlw	56
  1306  000E08  EC71  F007         	call	_lcd_cmd
  1307                           
  1308                           ;lcd.c: 67:         atraso_ms(1);
  1309  000E0C  0E00               	movlw	0
  1310  000E0E  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1311  000E10  0E01               	movlw	1
  1312  000E12  6E01               	movwf	atraso_ms@valor^0,c
  1313  000E14  EC8D  F006         	call	_atraso_ms	;wreg free
  1314                           
  1315                           ;lcd.c: 68:  lcd_cmd(0x38);
  1316  000E18  0E38               	movlw	56
  1317  000E1A  EC71  F007         	call	_lcd_cmd
  1318                           
  1319                           ;lcd.c: 69:  lcd_cmd(0x08);
  1320  000E1E  0E08               	movlw	8
  1321  000E20  EC71  F007         	call	_lcd_cmd
  1322                           
  1323                           ;lcd.c: 70:  lcd_cmd(0x0F);
  1324  000E24  0E0F               	movlw	15
  1325  000E26  EC71  F007         	call	_lcd_cmd
  1326                           
  1327                           ;lcd.c: 71:  lcd_cmd(0x01);
  1328  000E2A  0E01               	movlw	1
  1329  000E2C  EC71  F007         	call	_lcd_cmd
  1330                           
  1331                           ;lcd.c: 72:  lcd_cmd(0x38);
  1332  000E30  0E38               	movlw	56
  1333  000E32  EC71  F007         	call	_lcd_cmd
  1334                           
  1335                           ;lcd.c: 73:         lcd_cmd(0x80);
  1336  000E36  0E80               	movlw	128
  1337  000E38  EC71  F007         	call	_lcd_cmd
  1338  000E3C  0012               	return		;funcret
  1339  000E3E                     __end_of_lcd_init:
  1340                           	callstack 0
  1341                           
  1342 ;; *************** function _lcd_cmd *****************
  1343 ;; Defined at:
  1344 ;;		line 35 in file "lcd.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  val             1    wreg     unsigned char 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  val             1    6[COMRAM] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      void 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2, status,0, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1358 ;;      Params:         0       0       0       0       0       0       0
  1359 ;;      Locals:         1       0       0       0       0       0       0
  1360 ;;      Temps:          0       0       0       0       0       0       0
  1361 ;;      Totals:         1       0       0       0       0       0       0
  1362 ;;Total ram usage:        1 bytes
  1363 ;; Hardware stack levels used: 1
  1364 ;; Hardware stack levels required when called: 1
  1365 ;; This function calls:
  1366 ;;		_atraso_ms
  1367 ;;		_lcd_wr
  1368 ;; This function is called by:
  1369 ;;		_lcd_init
  1370 ;;		_main
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text7
  1375  000EE2                     __ptext7:
  1376                           	callstack 0
  1377  000EE2                     _lcd_cmd:
  1378                           	callstack 28
  1379                           
  1380                           ;incstack = 0
  1381                           ;lcd_cmd@val stored from wreg
  1382  000EE2  6E07               	movwf	lcd_cmd@val^0,c
  1383  000EE4                     
  1384                           ;lcd.c: 35: void lcd_cmd(unsigned char val);lcd.c: 36: {;lcd.c: 37:  PORTEbits.RE1=1;
  1385  000EE4  8284               	bsf	132,1,c	;volatile
  1386  000EE6                     
  1387                           ;lcd.c: 38:         lcd_wr(val);
  1388  000EE6  5007               	movf	lcd_cmd@val^0,w,c
  1389  000EE8  ECBA  F007         	call	_lcd_wr
  1390  000EEC                     
  1391                           ;lcd.c: 39:         PORTEbits.RE2=0;
  1392  000EEC  9484               	bcf	132,2,c	;volatile
  1393  000EEE                     
  1394                           ;lcd.c: 40:         atraso_ms(3);
  1395  000EEE  0E00               	movlw	0
  1396  000EF0  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1397  000EF2  0E03               	movlw	3
  1398  000EF4  6E01               	movwf	atraso_ms@valor^0,c
  1399  000EF6  EC8D  F006         	call	_atraso_ms	;wreg free
  1400  000EFA                     
  1401                           ;lcd.c: 41:         PORTEbits.RE1=0;
  1402  000EFA  9284               	bcf	132,1,c	;volatile
  1403  000EFC                     
  1404                           ;lcd.c: 42:         atraso_ms(3);
  1405  000EFC  0E00               	movlw	0
  1406  000EFE  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1407  000F00  0E03               	movlw	3
  1408  000F02  6E01               	movwf	atraso_ms@valor^0,c
  1409  000F04  EC8D  F006         	call	_atraso_ms	;wreg free
  1410  000F08                     
  1411                           ;lcd.c: 43:  PORTEbits.RE1=1;
  1412  000F08  8284               	bsf	132,1,c	;volatile
  1413  000F0A  0012               	return		;funcret
  1414  000F0C                     __end_of_lcd_cmd:
  1415                           	callstack 0
  1416                           
  1417 ;; *************** function _lcd_wr *****************
  1418 ;; Defined at:
  1419 ;;		line 30 in file "lcd.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  val             1    wreg     unsigned char 
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;  val             1    0[COMRAM] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      void 
  1426 ;; Registers used:
  1427 ;;		wreg
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1433 ;;      Params:         0       0       0       0       0       0       0
  1434 ;;      Locals:         1       0       0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0
  1436 ;;      Totals:         1       0       0       0       0       0       0
  1437 ;;Total ram usage:        1 bytes
  1438 ;; Hardware stack levels used: 1
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_lcd_cmd
  1443 ;;		_lcd_dat
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text8
  1448  000F74                     __ptext8:
  1449                           	callstack 0
  1450  000F74                     _lcd_wr:
  1451                           	callstack 28
  1452                           
  1453                           ;incstack = 0
  1454                           ;lcd_wr@val stored from wreg
  1455  000F74  6E01               	movwf	lcd_wr@val^0,c
  1456  000F76                     
  1457                           ;lcd.c: 30: void lcd_wr(unsigned char val);lcd.c: 31: {;lcd.c: 32:   PORTD=val;
  1458  000F76  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  1459  000F7A  0012               	return		;funcret
  1460  000F7C                     __end_of_lcd_wr:
  1461                           	callstack 0
  1462                           
  1463 ;; *************** function _atraso_ms *****************
  1464 ;; Defined at:
  1465 ;;		line 26 in file "atraso.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  valor           2    0[COMRAM] unsigned int 
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  i               2    2[COMRAM] unsigned int 
  1470 ;;  k               1    5[COMRAM] volatile unsigned char 
  1471 ;;  j               1    4[COMRAM] volatile unsigned char 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2, status,0
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1481 ;;      Params:         2       0       0       0       0       0       0
  1482 ;;      Locals:         4       0       0       0       0       0       0
  1483 ;;      Temps:          0       0       0       0       0       0       0
  1484 ;;      Totals:         6       0       0       0       0       0       0
  1485 ;;Total ram usage:        6 bytes
  1486 ;; Hardware stack levels used: 1
  1487 ;; This function calls:
  1488 ;;		Nothing
  1489 ;; This function is called by:
  1490 ;;		_lcd_cmd
  1491 ;;		_lcd_dat
  1492 ;;		_lcd_init
  1493 ;;		_main
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text9
  1498  000D1A                     __ptext9:
  1499                           	callstack 0
  1500  000D1A                     _atraso_ms:
  1501                           	callstack 28
  1502  000D1A                     
  1503                           ;atraso.c: 27:     unsigned int i;;atraso.c: 28:     volatile unsigned char j, k;;atraso
      +                          .c: 30:     for (i = 0; i < valor; i++) {
  1504  000D1A  0E00               	movlw	0
  1505  000D1C  6E04               	movwf	(atraso_ms@i+1)^0,c
  1506  000D1E  0E00               	movlw	0
  1507  000D20  6E03               	movwf	atraso_ms@i^0,c
  1508  000D22  EFB3  F006         	goto	l1507
  1509  000D26                     l1485:
  1510                           
  1511                           ;atraso.c: 32:         for (j = 0; j < 41; j++) {
  1512  000D26  0E00               	movlw	0
  1513  000D28  6E05               	movwf	atraso_ms@j^0,c	;volatile
  1514  000D2A                     l1487:
  1515  000D2A  0E28               	movlw	40
  1516  000D2C  6405               	cpfsgt	atraso_ms@j^0,c	;volatile
  1517  000D2E  EF9B  F006         	goto	u921
  1518  000D32  EF9D  F006         	goto	u920
  1519  000D36                     u921:
  1520  000D36  EF9F  F006         	goto	l1491
  1521  000D3A                     u920:
  1522  000D3A  EFB1  F006         	goto	l1505
  1523  000D3E                     l1491:
  1524                           
  1525                           ;atraso.c: 33:             for (k = 0; k < 3; k++);
  1526  000D3E  0E00               	movlw	0
  1527  000D40  6E06               	movwf	atraso_ms@k^0,c	;volatile
  1528  000D42                     l1493:
  1529  000D42  0E02               	movlw	2
  1530  000D44  6406               	cpfsgt	atraso_ms@k^0,c	;volatile
  1531  000D46  EFA7  F006         	goto	u931
  1532  000D4A  EFA9  F006         	goto	u930
  1533  000D4E                     u931:
  1534  000D4E  EFAB  F006         	goto	l1497
  1535  000D52                     u930:
  1536  000D52  EFAE  F006         	goto	l1501
  1537  000D56                     l1497:
  1538  000D56  2A06               	incf	atraso_ms@k^0,f,c	;volatile
  1539  000D58  EFA1  F006         	goto	l1493
  1540  000D5C                     l1501:
  1541                           
  1542                           ;atraso.c: 34:         }
  1543  000D5C  2A05               	incf	atraso_ms@j^0,f,c	;volatile
  1544  000D5E  EF95  F006         	goto	l1487
  1545  000D62                     l1505:
  1546                           
  1547                           ;atraso.c: 35:     }
  1548  000D62  4A03               	infsnz	atraso_ms@i^0,f,c
  1549  000D64  2A04               	incf	(atraso_ms@i+1)^0,f,c
  1550  000D66                     l1507:
  1551  000D66  5001               	movf	atraso_ms@valor^0,w,c
  1552  000D68  5C03               	subwf	atraso_ms@i^0,w,c
  1553  000D6A  5002               	movf	(atraso_ms@valor+1)^0,w,c
  1554  000D6C  5804               	subwfb	(atraso_ms@i+1)^0,w,c
  1555  000D6E  A0D8               	btfss	status,0,c
  1556  000D70  EFBC  F006         	goto	u941
  1557  000D74  EFBE  F006         	goto	u940
  1558  000D78                     u941:
  1559  000D78  EF93  F006         	goto	l1485
  1560  000D7C                     u940:
  1561  000D7C  0012               	return		;funcret
  1562  000D7E                     __end_of_atraso_ms:
  1563                           	callstack 0
  1564                           
  1565 ;; *************** function _itoa1 *****************
  1566 ;; Defined at:
  1567 ;;		line 101 in file "main.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;  val1            2   20[COMRAM] unsigned int 
  1570 ;;  str1            2   22[COMRAM] PTR unsigned char 
  1571 ;;		 -> main@str1(6), 
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;		None
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1583 ;;      Params:         4       0       0       0       0       0       0
  1584 ;;      Locals:         0       0       0       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0       0       0
  1586 ;;      Totals:         4       0       0       0       0       0       0
  1587 ;;Total ram usage:        4 bytes
  1588 ;; Hardware stack levels used: 1
  1589 ;; Hardware stack levels required when called: 1
  1590 ;; This function calls:
  1591 ;;		___lwdiv
  1592 ;;		___lwmod
  1593 ;; This function is called by:
  1594 ;;		_main
  1595 ;; This function uses a non-reentrant model
  1596 ;;
  1597                           
  1598                           	psect	text10
  1599  0008D6                     __ptext10:
  1600                           	callstack 0
  1601  0008D6                     _itoa1:
  1602                           	callstack 29
  1603  0008D6                     
  1604                           ;main.c: 102:     str1[0] = (val1 / 10000) + 0x30;
  1605  0008D6  C015  F00E         	movff	itoa1@val1,___lwdiv@dividend
  1606  0008DA  C016  F00F         	movff	itoa1@val1+1,___lwdiv@dividend+1
  1607  0008DE  0E27               	movlw	39
  1608  0008E0  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1609  0008E2  0E10               	movlw	16
  1610  0008E4  6E10               	movwf	___lwdiv@divisor^0,c
  1611  0008E6  EC1D  F006         	call	___lwdiv	;wreg free
  1612  0008EA  500E               	movf	?___lwdiv^0,w,c
  1613  0008EC  0F30               	addlw	48
  1614  0008EE  C017  FFD9         	movff	itoa1@str1,fsr2l
  1615  0008F2  C018  FFDA         	movff	itoa1@str1+1,fsr2h
  1616  0008F6  6EDF               	movwf	indf2,c
  1617                           
  1618                           ;main.c: 103:     str1[1] = ((val1 % 10000) / 1000) + 0x30;
  1619  0008F8  EE20 F001          	lfsr	2,1
  1620  0008FC  5017               	movf	itoa1@str1^0,w,c
  1621  0008FE  26D9               	addwf	fsr2l,f,c
  1622  000900  5018               	movf	(itoa1@str1+1)^0,w,c
  1623  000902  22DA               	addwfc	fsr2h,f,c
  1624  000904  0E27               	movlw	39
  1625  000906  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1626  000908  0E10               	movlw	16
  1627  00090A  6E03               	movwf	___lwmod@divisor^0,c
  1628  00090C  C015  F001         	movff	itoa1@val1,___lwmod@dividend
  1629  000910  C016  F002         	movff	itoa1@val1+1,___lwmod@dividend+1
  1630  000914  ECBF  F006         	call	___lwmod	;wreg free
  1631  000918  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1632  00091C  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1633  000920  0E03               	movlw	3
  1634  000922  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1635  000924  0EE8               	movlw	232
  1636  000926  6E10               	movwf	___lwdiv@divisor^0,c
  1637  000928  EC1D  F006         	call	___lwdiv	;wreg free
  1638  00092C  500E               	movf	?___lwdiv^0,w,c
  1639  00092E  0F30               	addlw	48
  1640  000930  6EDF               	movwf	indf2,c
  1641                           
  1642                           ;main.c: 104:     str1[2] = ((val1 % 1000) / 100) + 0x30;
  1643  000932  EE20 F002          	lfsr	2,2
  1644  000936  5017               	movf	itoa1@str1^0,w,c
  1645  000938  26D9               	addwf	fsr2l,f,c
  1646  00093A  5018               	movf	(itoa1@str1+1)^0,w,c
  1647  00093C  22DA               	addwfc	fsr2h,f,c
  1648  00093E  0E03               	movlw	3
  1649  000940  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1650  000942  0EE8               	movlw	232
  1651  000944  6E03               	movwf	___lwmod@divisor^0,c
  1652  000946  C015  F001         	movff	itoa1@val1,___lwmod@dividend
  1653  00094A  C016  F002         	movff	itoa1@val1+1,___lwmod@dividend+1
  1654  00094E  ECBF  F006         	call	___lwmod	;wreg free
  1655  000952  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1656  000956  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1657  00095A  0E00               	movlw	0
  1658  00095C  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1659  00095E  0E64               	movlw	100
  1660  000960  6E10               	movwf	___lwdiv@divisor^0,c
  1661  000962  EC1D  F006         	call	___lwdiv	;wreg free
  1662  000966  500E               	movf	?___lwdiv^0,w,c
  1663  000968  0F30               	addlw	48
  1664  00096A  6EDF               	movwf	indf2,c
  1665                           
  1666                           ;main.c: 105:     str1[3] = ((val1 % 100) / 10) + 0x30;
  1667  00096C  EE20 F003          	lfsr	2,3
  1668  000970  5017               	movf	itoa1@str1^0,w,c
  1669  000972  26D9               	addwf	fsr2l,f,c
  1670  000974  5018               	movf	(itoa1@str1+1)^0,w,c
  1671  000976  22DA               	addwfc	fsr2h,f,c
  1672  000978  0E00               	movlw	0
  1673  00097A  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1674  00097C  0E64               	movlw	100
  1675  00097E  6E03               	movwf	___lwmod@divisor^0,c
  1676  000980  C015  F001         	movff	itoa1@val1,___lwmod@dividend
  1677  000984  C016  F002         	movff	itoa1@val1+1,___lwmod@dividend+1
  1678  000988  ECBF  F006         	call	___lwmod	;wreg free
  1679  00098C  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1680  000990  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1681  000994  0E00               	movlw	0
  1682  000996  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1683  000998  0E0A               	movlw	10
  1684  00099A  6E10               	movwf	___lwdiv@divisor^0,c
  1685  00099C  EC1D  F006         	call	___lwdiv	;wreg free
  1686  0009A0  500E               	movf	?___lwdiv^0,w,c
  1687  0009A2  0F30               	addlw	48
  1688  0009A4  6EDF               	movwf	indf2,c
  1689                           
  1690                           ;main.c: 106:     str1[4] = (val1 % 10) + 0x30;
  1691  0009A6  EE20 F004          	lfsr	2,4
  1692  0009AA  5017               	movf	itoa1@str1^0,w,c
  1693  0009AC  26D9               	addwf	fsr2l,f,c
  1694  0009AE  5018               	movf	(itoa1@str1+1)^0,w,c
  1695  0009B0  22DA               	addwfc	fsr2h,f,c
  1696  0009B2  C015  F001         	movff	itoa1@val1,___lwmod@dividend
  1697  0009B6  C016  F002         	movff	itoa1@val1+1,___lwmod@dividend+1
  1698  0009BA  0E00               	movlw	0
  1699  0009BC  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1700  0009BE  0E0A               	movlw	10
  1701  0009C0  6E03               	movwf	___lwmod@divisor^0,c
  1702  0009C2  ECBF  F006         	call	___lwmod	;wreg free
  1703  0009C6  5001               	movf	?___lwmod^0,w,c
  1704  0009C8  0F30               	addlw	48
  1705  0009CA  6EDF               	movwf	indf2,c
  1706  0009CC                     
  1707                           ;main.c: 107:     str1[5] = 0;
  1708  0009CC  EE20 F005          	lfsr	2,5
  1709  0009D0  5017               	movf	itoa1@str1^0,w,c
  1710  0009D2  26D9               	addwf	fsr2l,f,c
  1711  0009D4  5018               	movf	(itoa1@str1+1)^0,w,c
  1712  0009D6  22DA               	addwfc	fsr2h,f,c
  1713  0009D8  0E00               	movlw	0
  1714  0009DA  6EDF               	movwf	indf2,c
  1715  0009DC  0012               	return		;funcret
  1716  0009DE                     __end_of_itoa1:
  1717                           	callstack 0
  1718                           
  1719 ;; *************** function _itoa *****************
  1720 ;; Defined at:
  1721 ;;		line 92 in file "main.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  val             2   20[COMRAM] unsigned int 
  1724 ;;  str             2   22[COMRAM] PTR unsigned char 
  1725 ;;		 -> main@str(6), 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1737 ;;      Params:         4       0       0       0       0       0       0
  1738 ;;      Locals:         0       0       0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0
  1740 ;;      Totals:         4       0       0       0       0       0       0
  1741 ;;Total ram usage:        4 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; Hardware stack levels required when called: 1
  1744 ;; This function calls:
  1745 ;;		___lwdiv
  1746 ;;		___lwmod
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text11
  1753  0009DE                     __ptext11:
  1754                           	callstack 0
  1755  0009DE                     _itoa:
  1756                           	callstack 29
  1757  0009DE                     
  1758                           ;main.c: 93:     str[0] = (val / 10000) + 0x30;
  1759  0009DE  C015  F00E         	movff	itoa@val,___lwdiv@dividend
  1760  0009E2  C016  F00F         	movff	itoa@val+1,___lwdiv@dividend+1
  1761  0009E6  0E27               	movlw	39
  1762  0009E8  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1763  0009EA  0E10               	movlw	16
  1764  0009EC  6E10               	movwf	___lwdiv@divisor^0,c
  1765  0009EE  EC1D  F006         	call	___lwdiv	;wreg free
  1766  0009F2  500E               	movf	?___lwdiv^0,w,c
  1767  0009F4  0F30               	addlw	48
  1768  0009F6  C017  FFD9         	movff	itoa@str,fsr2l
  1769  0009FA  C018  FFDA         	movff	itoa@str+1,fsr2h
  1770  0009FE  6EDF               	movwf	indf2,c
  1771                           
  1772                           ;main.c: 94:     str[1] = ((val % 10000) / 1000) + 0x30;
  1773  000A00  EE20 F001          	lfsr	2,1
  1774  000A04  5017               	movf	itoa@str^0,w,c
  1775  000A06  26D9               	addwf	fsr2l,f,c
  1776  000A08  5018               	movf	(itoa@str+1)^0,w,c
  1777  000A0A  22DA               	addwfc	fsr2h,f,c
  1778  000A0C  0E27               	movlw	39
  1779  000A0E  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1780  000A10  0E10               	movlw	16
  1781  000A12  6E03               	movwf	___lwmod@divisor^0,c
  1782  000A14  C015  F001         	movff	itoa@val,___lwmod@dividend
  1783  000A18  C016  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1784  000A1C  ECBF  F006         	call	___lwmod	;wreg free
  1785  000A20  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1786  000A24  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1787  000A28  0E03               	movlw	3
  1788  000A2A  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1789  000A2C  0EE8               	movlw	232
  1790  000A2E  6E10               	movwf	___lwdiv@divisor^0,c
  1791  000A30  EC1D  F006         	call	___lwdiv	;wreg free
  1792  000A34  500E               	movf	?___lwdiv^0,w,c
  1793  000A36  0F30               	addlw	48
  1794  000A38  6EDF               	movwf	indf2,c
  1795                           
  1796                           ;main.c: 95:     str[2] = ((val % 1000) / 100) + 0x30;
  1797  000A3A  EE20 F002          	lfsr	2,2
  1798  000A3E  5017               	movf	itoa@str^0,w,c
  1799  000A40  26D9               	addwf	fsr2l,f,c
  1800  000A42  5018               	movf	(itoa@str+1)^0,w,c
  1801  000A44  22DA               	addwfc	fsr2h,f,c
  1802  000A46  0E03               	movlw	3
  1803  000A48  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1804  000A4A  0EE8               	movlw	232
  1805  000A4C  6E03               	movwf	___lwmod@divisor^0,c
  1806  000A4E  C015  F001         	movff	itoa@val,___lwmod@dividend
  1807  000A52  C016  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1808  000A56  ECBF  F006         	call	___lwmod	;wreg free
  1809  000A5A  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1810  000A5E  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1811  000A62  0E00               	movlw	0
  1812  000A64  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1813  000A66  0E64               	movlw	100
  1814  000A68  6E10               	movwf	___lwdiv@divisor^0,c
  1815  000A6A  EC1D  F006         	call	___lwdiv	;wreg free
  1816  000A6E  500E               	movf	?___lwdiv^0,w,c
  1817  000A70  0F30               	addlw	48
  1818  000A72  6EDF               	movwf	indf2,c
  1819                           
  1820                           ;main.c: 96:     str[3] = ((val % 100) / 10) + 0x30;
  1821  000A74  EE20 F003          	lfsr	2,3
  1822  000A78  5017               	movf	itoa@str^0,w,c
  1823  000A7A  26D9               	addwf	fsr2l,f,c
  1824  000A7C  5018               	movf	(itoa@str+1)^0,w,c
  1825  000A7E  22DA               	addwfc	fsr2h,f,c
  1826  000A80  0E00               	movlw	0
  1827  000A82  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1828  000A84  0E64               	movlw	100
  1829  000A86  6E03               	movwf	___lwmod@divisor^0,c
  1830  000A88  C015  F001         	movff	itoa@val,___lwmod@dividend
  1831  000A8C  C016  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1832  000A90  ECBF  F006         	call	___lwmod	;wreg free
  1833  000A94  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1834  000A98  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1835  000A9C  0E00               	movlw	0
  1836  000A9E  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1837  000AA0  0E0A               	movlw	10
  1838  000AA2  6E10               	movwf	___lwdiv@divisor^0,c
  1839  000AA4  EC1D  F006         	call	___lwdiv	;wreg free
  1840  000AA8  500E               	movf	?___lwdiv^0,w,c
  1841  000AAA  0F30               	addlw	48
  1842  000AAC  6EDF               	movwf	indf2,c
  1843                           
  1844                           ;main.c: 97:     str[4] = (val % 10) + 0x30;
  1845  000AAE  EE20 F004          	lfsr	2,4
  1846  000AB2  5017               	movf	itoa@str^0,w,c
  1847  000AB4  26D9               	addwf	fsr2l,f,c
  1848  000AB6  5018               	movf	(itoa@str+1)^0,w,c
  1849  000AB8  22DA               	addwfc	fsr2h,f,c
  1850  000ABA  C015  F001         	movff	itoa@val,___lwmod@dividend
  1851  000ABE  C016  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1852  000AC2  0E00               	movlw	0
  1853  000AC4  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1854  000AC6  0E0A               	movlw	10
  1855  000AC8  6E03               	movwf	___lwmod@divisor^0,c
  1856  000ACA  ECBF  F006         	call	___lwmod	;wreg free
  1857  000ACE  5001               	movf	?___lwmod^0,w,c
  1858  000AD0  0F30               	addlw	48
  1859  000AD2  6EDF               	movwf	indf2,c
  1860  000AD4                     
  1861                           ;main.c: 98:     str[5] = 0;
  1862  000AD4  EE20 F005          	lfsr	2,5
  1863  000AD8  5017               	movf	itoa@str^0,w,c
  1864  000ADA  26D9               	addwf	fsr2l,f,c
  1865  000ADC  5018               	movf	(itoa@str+1)^0,w,c
  1866  000ADE  22DA               	addwfc	fsr2h,f,c
  1867  000AE0  0E00               	movlw	0
  1868  000AE2  6EDF               	movwf	indf2,c
  1869  000AE4  0012               	return		;funcret
  1870  000AE6                     __end_of_itoa:
  1871                           	callstack 0
  1872                           
  1873 ;; *************** function ___lwmod *****************
  1874 ;; Defined at:
  1875 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  dividend        2    0[COMRAM] unsigned int 
  1878 ;;  divisor         2    2[COMRAM] unsigned int 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  counter         1    4[COMRAM] unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  2    0[COMRAM] unsigned int 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2, status,0
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1890 ;;      Params:         4       0       0       0       0       0       0
  1891 ;;      Locals:         1       0       0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0
  1893 ;;      Totals:         5       0       0       0       0       0       0
  1894 ;;Total ram usage:        5 bytes
  1895 ;; Hardware stack levels used: 1
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_itoa
  1900 ;;		_itoa1
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text12
  1905  000D7E                     __ptext12:
  1906                           	callstack 0
  1907  000D7E                     ___lwmod:
  1908                           	callstack 29
  1909  000D7E  5003               	movf	___lwmod@divisor^0,w,c
  1910  000D80  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1911  000D82  B4D8               	btfsc	status,2,c
  1912  000D84  EFC6  F006         	goto	u981
  1913  000D88  EFC8  F006         	goto	u980
  1914  000D8C                     u981:
  1915  000D8C  EFEC  F006         	goto	l755
  1916  000D90                     u980:
  1917  000D90  0E01               	movlw	1
  1918  000D92  6E05               	movwf	___lwmod@counter^0,c
  1919  000D94  EFD0  F006         	goto	l1571
  1920  000D98                     l1569:
  1921  000D98  90D8               	bcf	status,0,c
  1922  000D9A  3603               	rlcf	___lwmod@divisor^0,f,c
  1923  000D9C  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1924  000D9E  2A05               	incf	___lwmod@counter^0,f,c
  1925  000DA0                     l1571:
  1926  000DA0  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1927  000DA2  EFD5  F006         	goto	u991
  1928  000DA6  EFD7  F006         	goto	u990
  1929  000DAA                     u991:
  1930  000DAA  EFCC  F006         	goto	l1569
  1931  000DAE                     u990:
  1932  000DAE                     l1573:
  1933  000DAE  5003               	movf	___lwmod@divisor^0,w,c
  1934  000DB0  5C01               	subwf	___lwmod@dividend^0,w,c
  1935  000DB2  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1936  000DB4  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1937  000DB6  A0D8               	btfss	status,0,c
  1938  000DB8  EFE0  F006         	goto	u1001
  1939  000DBC  EFE2  F006         	goto	u1000
  1940  000DC0                     u1001:
  1941  000DC0  EFE6  F006         	goto	l1577
  1942  000DC4                     u1000:
  1943  000DC4  5003               	movf	___lwmod@divisor^0,w,c
  1944  000DC6  5E01               	subwf	___lwmod@dividend^0,f,c
  1945  000DC8  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1946  000DCA  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1947  000DCC                     l1577:
  1948  000DCC  90D8               	bcf	status,0,c
  1949  000DCE  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1950  000DD0  3203               	rrcf	___lwmod@divisor^0,f,c
  1951  000DD2  2E05               	decfsz	___lwmod@counter^0,f,c
  1952  000DD4  EFD7  F006         	goto	l1573
  1953  000DD8                     l755:
  1954  000DD8  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1955  000DDC  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1956  000DE0  0012               	return		;funcret
  1957  000DE2                     __end_of___lwmod:
  1958                           	callstack 0
  1959                           
  1960 ;; *************** function ___lwdiv *****************
  1961 ;; Defined at:
  1962 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  dividend        2   13[COMRAM] unsigned int 
  1965 ;;  divisor         2   15[COMRAM] unsigned int 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  quotient        2   17[COMRAM] unsigned int 
  1968 ;;  counter         1   19[COMRAM] unsigned char 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  2   13[COMRAM] unsigned int 
  1971 ;; Registers used:
  1972 ;;		wreg, status,2, status,0
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1978 ;;      Params:         4       0       0       0       0       0       0
  1979 ;;      Locals:         3       0       0       0       0       0       0
  1980 ;;      Temps:          0       0       0       0       0       0       0
  1981 ;;      Totals:         7       0       0       0       0       0       0
  1982 ;;Total ram usage:        7 bytes
  1983 ;; Hardware stack levels used: 1
  1984 ;; This function calls:
  1985 ;;		Nothing
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;;		_itoa
  1989 ;;		_itoa1
  1990 ;;		_pwmSet1
  1991 ;;		_pwmSet2
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text13
  1996  000C3A                     __ptext13:
  1997                           	callstack 0
  1998  000C3A                     ___lwdiv:
  1999                           	callstack 29
  2000  000C3A  0E00               	movlw	0
  2001  000C3C  6E13               	movwf	(___lwdiv@quotient+1)^0,c
  2002  000C3E  0E00               	movlw	0
  2003  000C40  6E12               	movwf	___lwdiv@quotient^0,c
  2004  000C42  5010               	movf	___lwdiv@divisor^0,w,c
  2005  000C44  1011               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2006  000C46  B4D8               	btfsc	status,2,c
  2007  000C48  EF28  F006         	goto	u951
  2008  000C4C  EF2A  F006         	goto	u950
  2009  000C50                     u951:
  2010  000C50  EF52  F006         	goto	l745
  2011  000C54                     u950:
  2012  000C54  0E01               	movlw	1
  2013  000C56  6E14               	movwf	___lwdiv@counter^0,c
  2014  000C58  EF32  F006         	goto	l1551
  2015  000C5C                     l1549:
  2016  000C5C  90D8               	bcf	status,0,c
  2017  000C5E  3610               	rlcf	___lwdiv@divisor^0,f,c
  2018  000C60  3611               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2019  000C62  2A14               	incf	___lwdiv@counter^0,f,c
  2020  000C64                     l1551:
  2021  000C64  AE11               	btfss	(___lwdiv@divisor+1)^0,7,c
  2022  000C66  EF37  F006         	goto	u961
  2023  000C6A  EF39  F006         	goto	u960
  2024  000C6E                     u961:
  2025  000C6E  EF2E  F006         	goto	l1549
  2026  000C72                     u960:
  2027  000C72                     l1553:
  2028  000C72  90D8               	bcf	status,0,c
  2029  000C74  3612               	rlcf	___lwdiv@quotient^0,f,c
  2030  000C76  3613               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2031  000C78  5010               	movf	___lwdiv@divisor^0,w,c
  2032  000C7A  5C0E               	subwf	___lwdiv@dividend^0,w,c
  2033  000C7C  5011               	movf	(___lwdiv@divisor+1)^0,w,c
  2034  000C7E  580F               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2035  000C80  A0D8               	btfss	status,0,c
  2036  000C82  EF45  F006         	goto	u971
  2037  000C86  EF47  F006         	goto	u970
  2038  000C8A                     u971:
  2039  000C8A  EF4C  F006         	goto	l1561
  2040  000C8E                     u970:
  2041  000C8E  5010               	movf	___lwdiv@divisor^0,w,c
  2042  000C90  5E0E               	subwf	___lwdiv@dividend^0,f,c
  2043  000C92  5011               	movf	(___lwdiv@divisor+1)^0,w,c
  2044  000C94  5A0F               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2045  000C96  8012               	bsf	___lwdiv@quotient^0,0,c
  2046  000C98                     l1561:
  2047  000C98  90D8               	bcf	status,0,c
  2048  000C9A  3211               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2049  000C9C  3210               	rrcf	___lwdiv@divisor^0,f,c
  2050  000C9E  2E14               	decfsz	___lwdiv@counter^0,f,c
  2051  000CA0  EF39  F006         	goto	l1553
  2052  000CA4                     l745:
  2053  000CA4  C012  F00E         	movff	___lwdiv@quotient,?___lwdiv
  2054  000CA8  C013  F00F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2055  000CAC  0012               	return		;funcret
  2056  000CAE                     __end_of___lwdiv:
  2057                           	callstack 0
  2058                           
  2059 ;; *************** function _adc_init *****************
  2060 ;; Defined at:
  2061 ;;		line 29 in file "adc.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;		None
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2075 ;;      Params:         0       0       0       0       0       0       0
  2076 ;;      Locals:         0       0       0       0       0       0       0
  2077 ;;      Temps:          0       0       0       0       0       0       0
  2078 ;;      Totals:         0       0       0       0       0       0       0
  2079 ;;Total ram usage:        0 bytes
  2080 ;; Hardware stack levels used: 1
  2081 ;; This function calls:
  2082 ;;		Nothing
  2083 ;; This function is called by:
  2084 ;;		_main
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           	psect	text14
  2089  000F66                     __ptext14:
  2090                           	callstack 0
  2091  000F66                     _adc_init:
  2092                           	callstack 30
  2093  000F66                     
  2094                           ;adc.c: 34:     ADCON0 = 0x01;
  2095  000F66  0E01               	movlw	1
  2096  000F68  6EC2               	movwf	194,c	;volatile
  2097                           
  2098                           ;adc.c: 35:     ADCON1 = 0x0B;
  2099  000F6A  0E0B               	movlw	11
  2100  000F6C  6EC1               	movwf	193,c	;volatile
  2101                           
  2102                           ;adc.c: 36:     ADCON2 = 0x01;
  2103  000F6E  0E01               	movlw	1
  2104  000F70  6EC0               	movwf	192,c	;volatile
  2105  000F72  0012               	return		;funcret
  2106  000F74                     __end_of_adc_init:
  2107                           	callstack 0
  2108                           
  2109 ;; *************** function _adc_amostra *****************
  2110 ;; Defined at:
  2111 ;;		line 42 in file "adc.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  canal           1    wreg     unsigned char 
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;  canal           1    6[COMRAM] unsigned char 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  2    0[COMRAM] unsigned int 
  2118 ;; Registers used:
  2119 ;;		wreg, status,2, status,0
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2125 ;;      Params:         2       0       0       0       0       0       0
  2126 ;;      Locals:         1       0       0       0       0       0       0
  2127 ;;      Temps:          4       0       0       0       0       0       0
  2128 ;;      Totals:         7       0       0       0       0       0       0
  2129 ;;Total ram usage:        7 bytes
  2130 ;; Hardware stack levels used: 1
  2131 ;; This function calls:
  2132 ;;		Nothing
  2133 ;; This function is called by:
  2134 ;;		_main
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text15
  2139  000BAA                     __ptext15:
  2140                           	callstack 0
  2141  000BAA                     _adc_amostra:
  2142                           	callstack 30
  2143                           
  2144                           ;incstack = 0
  2145                           ;adc_amostra@canal stored from wreg
  2146  000BAA  6E07               	movwf	adc_amostra@canal^0,c
  2147  000BAC                     
  2148                           ;adc.c: 44:     switch (canal) {
  2149  000BAC  EFE4  F005         	goto	l1591
  2150  000BB0                     l1583:
  2151                           
  2152                           ;adc.c: 46:             ADCON0 = 0x01;
  2153  000BB0  0E01               	movlw	1
  2154  000BB2  6EC2               	movwf	194,c	;volatile
  2155                           
  2156                           ;adc.c: 47:             break;
  2157  000BB4  EFFD  F005         	goto	l20
  2158  000BB8                     l1585:
  2159                           
  2160                           ;adc.c: 49:             ADCON0 = 0x09;
  2161  000BB8  0E09               	movlw	9
  2162  000BBA  6EC2               	movwf	194,c	;volatile
  2163                           
  2164                           ;adc.c: 50:             break;
  2165  000BBC  EFFD  F005         	goto	l20
  2166  000BC0                     l1587:
  2167                           
  2168                           ;adc.c: 52:             ADCON0 = 0x05;
  2169  000BC0  0E05               	movlw	5
  2170  000BC2  6EC2               	movwf	194,c	;volatile
  2171                           
  2172                           ;adc.c: 53:             break;
  2173  000BC4  EFFD  F005         	goto	l20
  2174  000BC8                     l1591:
  2175  000BC8  5007               	movf	adc_amostra@canal^0,w,c
  2176  000BCA  6E03               	movwf	??_adc_amostra^0,c
  2177  000BCC  6A04               	clrf	(??_adc_amostra+1)^0,c
  2178                           
  2179                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2180                           ; Switch size 1, requested type "simple"
  2181                           ; Number of cases is 1, Range of values is 0 to 0
  2182                           ; switch strategies available:
  2183                           ; Name         Instructions Cycles
  2184                           ; simple_byte            4     3 (average)
  2185                           ;	Chosen strategy is simple_byte
  2186  000BCE  5004               	movf	(??_adc_amostra+1)^0,w,c
  2187  000BD0  0A00               	xorlw	0	; case 0
  2188  000BD2  B4D8               	btfsc	status,2,c
  2189  000BD4  EFEE  F005         	goto	l1805
  2190  000BD8  EFFD  F005         	goto	l20
  2191  000BDC                     l1805:
  2192                           
  2193                           ; Switch size 1, requested type "simple"
  2194                           ; Number of cases is 3, Range of values is 0 to 2
  2195                           ; switch strategies available:
  2196                           ; Name         Instructions Cycles
  2197                           ; simple_byte           10     6 (average)
  2198                           ;	Chosen strategy is simple_byte
  2199  000BDC  5003               	movf	??_adc_amostra^0,w,c
  2200  000BDE  0A00               	xorlw	0	; case 0
  2201  000BE0  B4D8               	btfsc	status,2,c
  2202  000BE2  EFD8  F005         	goto	l1583
  2203  000BE6  0A01               	xorlw	1	; case 1
  2204  000BE8  B4D8               	btfsc	status,2,c
  2205  000BEA  EFDC  F005         	goto	l1585
  2206  000BEE  0A03               	xorlw	3	; case 2
  2207  000BF0  B4D8               	btfsc	status,2,c
  2208  000BF2  EFE0  F005         	goto	l1587
  2209  000BF6  EFFD  F005         	goto	l20
  2210  000BFA                     l20:
  2211                           
  2212                           ;adc.c: 56:     ADCON0bits.GO = 1;
  2213  000BFA  82C2               	bsf	194,1,c	;volatile
  2214  000BFC                     l23:
  2215  000BFC  B2C2               	btfsc	194,1,c	;volatile
  2216  000BFE  EF03  F006         	goto	u1011
  2217  000C02  EF05  F006         	goto	u1010
  2218  000C06                     u1011:
  2219  000C06  EFFE  F005         	goto	l23
  2220  000C0A                     u1010:
  2221  000C0A                     
  2222                           ;adc.c: 59:     return ((((unsigned int) ADRESH) << 2) | (ADRESL >> 6));
  2223  000C0A  CFC3 F003          	movff	4035,??_adc_amostra	;volatile
  2224  000C0E  0E06               	movlw	6
  2225  000C10  6E04               	movwf	(??_adc_amostra+1)^0,c
  2226  000C12                     u1025:
  2227  000C12  90D8               	bcf	status,0,c
  2228  000C14  3203               	rrcf	??_adc_amostra^0,f,c
  2229  000C16  2E04               	decfsz	(??_adc_amostra+1)^0,f,c
  2230  000C18  EF09  F006         	goto	u1025
  2231  000C1C  5003               	movf	??_adc_amostra^0,w,c
  2232  000C1E  CFC4 F005          	movff	4036,??_adc_amostra+2	;volatile
  2233  000C22  6A06               	clrf	(??_adc_amostra+3)^0,c
  2234  000C24  90D8               	bcf	status,0,c
  2235  000C26  3605               	rlcf	(??_adc_amostra+2)^0,f,c
  2236  000C28  3606               	rlcf	(??_adc_amostra+3)^0,f,c
  2237  000C2A  90D8               	bcf	status,0,c
  2238  000C2C  3605               	rlcf	(??_adc_amostra+2)^0,f,c
  2239  000C2E  3606               	rlcf	(??_adc_amostra+3)^0,f,c
  2240  000C30  1005               	iorwf	(??_adc_amostra+2)^0,w,c
  2241  000C32  6E01               	movwf	?_adc_amostra^0,c
  2242  000C34  5006               	movf	(??_adc_amostra+3)^0,w,c
  2243  000C36  6E02               	movwf	(?_adc_amostra+1)^0,c
  2244  000C38  0012               	return		;funcret
  2245  000C3A                     __end_of_adc_amostra:
  2246                           	callstack 0
  2247                           
  2248 ;; *************** function ___awdiv *****************
  2249 ;; Defined at:
  2250 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  dividend        2    0[COMRAM] int 
  2253 ;;  divisor         2    2[COMRAM] int 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  quotient        2    6[COMRAM] int 
  2256 ;;  sign            1    5[COMRAM] unsigned char 
  2257 ;;  counter         1    4[COMRAM] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  2    0[COMRAM] int 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2267 ;;      Params:         4       0       0       0       0       0       0
  2268 ;;      Locals:         4       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0
  2270 ;;      Totals:         8       0       0       0       0       0       0
  2271 ;;Total ram usage:        8 bytes
  2272 ;; Hardware stack levels used: 1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_main
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text16
  2281  000AE6                     __ptext16:
  2282                           	callstack 0
  2283  000AE6                     ___awdiv:
  2284                           	callstack 30
  2285  000AE6  0E00               	movlw	0
  2286  000AE8  6E06               	movwf	___awdiv@sign^0,c
  2287  000AEA  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2288  000AEC  EF7C  F005         	goto	u1040
  2289  000AF0  EF7A  F005         	goto	u1041
  2290  000AF4                     u1041:
  2291  000AF4  EF82  F005         	goto	l1641
  2292  000AF8                     u1040:
  2293  000AF8  6C03               	negf	___awdiv@divisor^0,c
  2294  000AFA  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2295  000AFC  B0D8               	btfsc	status,0,c
  2296  000AFE  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2297  000B00  0E01               	movlw	1
  2298  000B02  6E06               	movwf	___awdiv@sign^0,c
  2299  000B04                     l1641:
  2300  000B04  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2301  000B06  EF89  F005         	goto	u1050
  2302  000B0A  EF87  F005         	goto	u1051
  2303  000B0E                     u1051:
  2304  000B0E  EF8F  F005         	goto	l1647
  2305  000B12                     u1050:
  2306  000B12  6C01               	negf	___awdiv@dividend^0,c
  2307  000B14  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2308  000B16  B0D8               	btfsc	status,0,c
  2309  000B18  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2310  000B1A  0E01               	movlw	1
  2311  000B1C  1A06               	xorwf	___awdiv@sign^0,f,c
  2312  000B1E                     l1647:
  2313  000B1E  0E00               	movlw	0
  2314  000B20  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2315  000B22  0E00               	movlw	0
  2316  000B24  6E07               	movwf	___awdiv@quotient^0,c
  2317  000B26  5003               	movf	___awdiv@divisor^0,w,c
  2318  000B28  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2319  000B2A  B4D8               	btfsc	status,2,c
  2320  000B2C  EF9A  F005         	goto	u1061
  2321  000B30  EF9C  F005         	goto	u1060
  2322  000B34                     u1061:
  2323  000B34  EFC4  F005         	goto	l1669
  2324  000B38                     u1060:
  2325  000B38  0E01               	movlw	1
  2326  000B3A  6E05               	movwf	___awdiv@counter^0,c
  2327  000B3C  EFA4  F005         	goto	l1655
  2328  000B40                     l1653:
  2329  000B40  90D8               	bcf	status,0,c
  2330  000B42  3603               	rlcf	___awdiv@divisor^0,f,c
  2331  000B44  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2332  000B46  2A05               	incf	___awdiv@counter^0,f,c
  2333  000B48                     l1655:
  2334  000B48  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2335  000B4A  EFA9  F005         	goto	u1071
  2336  000B4E  EFAB  F005         	goto	u1070
  2337  000B52                     u1071:
  2338  000B52  EFA0  F005         	goto	l1653
  2339  000B56                     u1070:
  2340  000B56                     l1657:
  2341  000B56  90D8               	bcf	status,0,c
  2342  000B58  3607               	rlcf	___awdiv@quotient^0,f,c
  2343  000B5A  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2344  000B5C  5003               	movf	___awdiv@divisor^0,w,c
  2345  000B5E  5C01               	subwf	___awdiv@dividend^0,w,c
  2346  000B60  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2347  000B62  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2348  000B64  A0D8               	btfss	status,0,c
  2349  000B66  EFB7  F005         	goto	u1081
  2350  000B6A  EFB9  F005         	goto	u1080
  2351  000B6E                     u1081:
  2352  000B6E  EFBE  F005         	goto	l1665
  2353  000B72                     u1080:
  2354  000B72  5003               	movf	___awdiv@divisor^0,w,c
  2355  000B74  5E01               	subwf	___awdiv@dividend^0,f,c
  2356  000B76  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2357  000B78  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2358  000B7A  8007               	bsf	___awdiv@quotient^0,0,c
  2359  000B7C                     l1665:
  2360  000B7C  90D8               	bcf	status,0,c
  2361  000B7E  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2362  000B80  3203               	rrcf	___awdiv@divisor^0,f,c
  2363  000B82  2E05               	decfsz	___awdiv@counter^0,f,c
  2364  000B84  EFAB  F005         	goto	l1657
  2365  000B88                     l1669:
  2366  000B88  5006               	movf	___awdiv@sign^0,w,c
  2367  000B8A  B4D8               	btfsc	status,2,c
  2368  000B8C  EFCA  F005         	goto	u1091
  2369  000B90  EFCC  F005         	goto	u1090
  2370  000B94                     u1091:
  2371  000B94  EFD0  F005         	goto	l1673
  2372  000B98                     u1090:
  2373  000B98  6C07               	negf	___awdiv@quotient^0,c
  2374  000B9A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2375  000B9C  B0D8               	btfsc	status,0,c
  2376  000B9E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2377  000BA0                     l1673:
  2378  000BA0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2379  000BA4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2380  000BA8  0012               	return		;funcret
  2381  000BAA                     __end_of___awdiv:
  2382                           	callstack 0
  2383                           
  2384                           	psect	rparam
  2385  0000                     
  2386                           	psect	idloc
  2387                           
  2388                           ;Config register IDLOC0 @ 0x200000
  2389                           ;	unspecified, using default values
  2390  200000                     	org	2097152
  2391  200000  FF                 	db	255
  2392                           
  2393                           ;Config register IDLOC1 @ 0x200001
  2394                           ;	unspecified, using default values
  2395  200001                     	org	2097153
  2396  200001  FF                 	db	255
  2397                           
  2398                           ;Config register IDLOC2 @ 0x200002
  2399                           ;	unspecified, using default values
  2400  200002                     	org	2097154
  2401  200002  FF                 	db	255
  2402                           
  2403                           ;Config register IDLOC3 @ 0x200003
  2404                           ;	unspecified, using default values
  2405  200003                     	org	2097155
  2406  200003  FF                 	db	255
  2407                           
  2408                           ;Config register IDLOC4 @ 0x200004
  2409                           ;	unspecified, using default values
  2410  200004                     	org	2097156
  2411  200004  FF                 	db	255
  2412                           
  2413                           ;Config register IDLOC5 @ 0x200005
  2414                           ;	unspecified, using default values
  2415  200005                     	org	2097157
  2416  200005  FF                 	db	255
  2417                           
  2418                           ;Config register IDLOC6 @ 0x200006
  2419                           ;	unspecified, using default values
  2420  200006                     	org	2097158
  2421  200006  FF                 	db	255
  2422                           
  2423                           ;Config register IDLOC7 @ 0x200007
  2424                           ;	unspecified, using default values
  2425  200007                     	org	2097159
  2426  200007  FF                 	db	255
  2427                           
  2428                           	psect	config
  2429                           
  2430                           ; Padding undefined space
  2431  300000                     	org	3145728
  2432  300000  FF                 	db	255
  2433                           
  2434                           ;Config register CONFIG1H @ 0x300001
  2435                           ;	Oscillator Selection bits
  2436                           ;	OSC = HS, HS oscillator
  2437                           ;	Fail-Safe Clock Monitor Enable bit
  2438                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2439                           ;	Internal/External Oscillator Switchover bit
  2440                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2441  300001                     	org	3145729
  2442  300001  02                 	db	2
  2443                           
  2444                           ;Config register CONFIG2L @ 0x300002
  2445                           ;	Power-up Timer Enable bit
  2446                           ;	PWRT = OFF, PWRT disabled
  2447                           ;	Brown-out Reset Enable bits
  2448                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  2449                           ;	Brown Out Reset Voltage bits
  2450                           ;	BORV = 0x2E, user specified literal
  2451  300002                     	org	3145730
  2452  300002  71                 	db	369
  2453                           
  2454                           ;Config register CONFIG2H @ 0x300003
  2455                           ;	Watchdog Timer Enable bit
  2456                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2457                           ;	Watchdog Timer Postscale Select bits
  2458                           ;	WDTPS = 1, 1:1
  2459  300003                     	org	3145731
  2460  300003  00                 	db	0
  2461                           
  2462                           ; Padding undefined space
  2463  300004                     	org	3145732
  2464  300004  FF                 	db	255
  2465                           
  2466                           ;Config register CONFIG3H @ 0x300005
  2467                           ;	CCP2 MUX bit
  2468                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2469                           ;	PORTB A/D Enable bit
  2470                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  2471                           ;	Low-Power Timer1 Oscillator Enable bit
  2472                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2473                           ;	MCLR Pin Enable bit
  2474                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2475  300005                     	org	3145733
  2476  300005  83                 	db	131
  2477                           
  2478                           ;Config register CONFIG4L @ 0x300006
  2479                           ;	Stack Full/Underflow Reset Enable bit
  2480                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  2481                           ;	Single-Supply ICSP Enable bit
  2482                           ;	LVP = OFF, Single-Supply ICSP disabled
  2483                           ;	Extended Instruction Set Enable bit
  2484                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2485                           ;	Background Debugger Enable bit
  2486                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  2487  300006                     	org	3145734
  2488  300006  80                 	db	128
  2489                           
  2490                           ; Padding undefined space
  2491  300007                     	org	3145735
  2492  300007  FF                 	db	255
  2493                           
  2494                           ;Config register CONFIG5L @ 0x300008
  2495                           ;	Code Protection bit
  2496                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  2497                           ;	Code Protection bit
  2498                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  2499                           ;	Code Protection bit
  2500                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  2501                           ;	Code Protection bit
  2502                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  2503  300008                     	org	3145736
  2504  300008  0F                 	db	15
  2505                           
  2506                           ;Config register CONFIG5H @ 0x300009
  2507                           ;	Boot Block Code Protection bit
  2508                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2509                           ;	Data EEPROM Code Protection bit
  2510                           ;	CPD = OFF, Data EEPROM not code-protected
  2511  300009                     	org	3145737
  2512  300009  C0                 	db	192
  2513                           
  2514                           ;Config register CONFIG6L @ 0x30000A
  2515                           ;	Write Protection bit
  2516                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  2517                           ;	Write Protection bit
  2518                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  2519                           ;	Write Protection bit
  2520                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  2521                           ;	Write Protection bit
  2522                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  2523  30000A                     	org	3145738
  2524  30000A  0F                 	db	15
  2525                           
  2526                           ;Config register CONFIG6H @ 0x30000B
  2527                           ;	Configuration Register Write Protection bit
  2528                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2529                           ;	Boot Block Write Protection bit
  2530                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  2531                           ;	Data EEPROM Write Protection bit
  2532                           ;	WRTD = OFF, Data EEPROM not write-protected
  2533  30000B                     	org	3145739
  2534  30000B  E0                 	db	224
  2535                           
  2536                           ;Config register CONFIG7L @ 0x30000C
  2537                           ;	Table Read Protection bit
  2538                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  2539                           ;	Table Read Protection bit
  2540                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  2541                           ;	Table Read Protection bit
  2542                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  2543                           ;	Table Read Protection bit
  2544                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2545  30000C                     	org	3145740
  2546  30000C  0F                 	db	15
  2547                           
  2548                           ;Config register CONFIG7H @ 0x30000D
  2549                           ;	Boot Block Table Read Protection bit
  2550                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2551  30000D                     	org	3145741
  2552  30000D  40                 	db	64
  2553                           tosu	equ	0xFFF
  2554                           tosh	equ	0xFFE
  2555                           tosl	equ	0xFFD
  2556                           stkptr	equ	0xFFC
  2557                           pclatu	equ	0xFFB
  2558                           pclath	equ	0xFFA
  2559                           pcl	equ	0xFF9
  2560                           tblptru	equ	0xFF8
  2561                           tblptrh	equ	0xFF7
  2562                           tblptrl	equ	0xFF6
  2563                           tablat	equ	0xFF5
  2564                           prodh	equ	0xFF4
  2565                           prodl	equ	0xFF3
  2566                           indf0	equ	0xFEF
  2567                           postinc0	equ	0xFEE
  2568                           postdec0	equ	0xFED
  2569                           preinc0	equ	0xFEC
  2570                           plusw0	equ	0xFEB
  2571                           fsr0h	equ	0xFEA
  2572                           fsr0l	equ	0xFE9
  2573                           wreg	equ	0xFE8
  2574                           indf1	equ	0xFE7
  2575                           postinc1	equ	0xFE6
  2576                           postdec1	equ	0xFE5
  2577                           preinc1	equ	0xFE4
  2578                           plusw1	equ	0xFE3
  2579                           fsr1h	equ	0xFE2
  2580                           fsr1l	equ	0xFE1
  2581                           bsr	equ	0xFE0
  2582                           indf2	equ	0xFDF
  2583                           postinc2	equ	0xFDE
  2584                           postdec2	equ	0xFDD
  2585                           preinc2	equ	0xFDC
  2586                           plusw2	equ	0xFDB
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8

Data Sizes:
    Strings     57
    Constant    0
    Data        31
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     73     104
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    itoa1@str1	PTR unsigned char  size(2) Largest target is 6
		 -> main@str1(COMRAM[6]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 6
		 -> main@str(COMRAM[6]), 

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[8]), STR_4(CODE[8]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_pwmSet1
    _pwmSet1->___lwdiv
    ___wmul->_adc_amostra
    _lcd_str->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _itoa1->___lwdiv
    _itoa->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                48    48      0   19262
                                             25 COMRAM    48    48      0
                            ___awdiv
                            ___lwdiv
                             ___wmul
                        _adc_amostra
                           _adc_init
                          _atraso_ms
                               _itoa
                              _itoa1
                            _lcd_cmd
                            _lcd_dat
                           _lcd_init
                            _lcd_str
                            _pwmInit
                            _pwmSet1
 ---------------------------------------------------------------------------------
 (1) _pwmSet1                                              5     5      0    2844
                                             20 COMRAM     5     5      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              7 COMRAM     6     2      4
                        _adc_amostra (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2    1253
                                              7 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     783
                                              6 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1529
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     783
                                              6 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            6     4      2     746
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _itoa1                                                4     0      4    3755
                                             20 COMRAM     4     0      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) _itoa                                                 4     0      4    3755
                                             20 COMRAM     4     0      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    1375
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1986
                                             13 COMRAM     7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
                        _adc_amostra (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_amostra                                          7     5      2      22
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___lwdiv
     ___lwmod (ARG)
     ___wmul (ARG)
       _adc_amostra (ARG)
     _adc_amostra (ARG)
   ___wmul
   _adc_amostra
   _adc_init
   _atraso_ms
   _itoa
     ___lwdiv
     ___lwmod
   _itoa1
     ___lwdiv
     ___lwmod
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_dat
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _lcd_str
     _lcd_dat
   _pwmInit
   _pwmSet1
     ___lwdiv
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     49      68       1       81.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      68      15        0.0%
DATA                 0      0      68       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Aug 01 14:06:42 2021

                     l20 0BFA                       l23 0BFC                       l15 0F72  
                     l26 0C38                       l36 0D7C             ___awdiv@sign 0006  
    ___wmul@multiplicand 000A     __size_of_adc_amostra 0090                      l161 0EE0  
                    l170 0E8C                      l242 0D18                      l155 0F7A  
                    l251 0F64                      l219 06C6                      l236 0AE4  
                    l164 0E3C                      l158 0F0A                      l254 0F30  
                    l239 09DC                      l485 0BA8                      l752 0CAC  
                    l745 0CA4                      l762 0DE0                      l755 0DD8  
                    l953 0F76                      u920 0D3A                      u921 0D36  
                    u930 0D52                      u931 0D4E                      u940 0D7C  
                    u941 0D78                      u950 0C54                      u951 0C50  
                    u960 0C72                      u961 0C6E                      u970 0C8E  
                    u971 0C8A                      u980 0D90                      u981 0D8C  
                    u990 0DAE                      u991 0DAA                      wreg 000FE8  
                   l1027 0F66                     l1501 0D5C                     l1093 0F52  
                   l1511 0EE6                     l1095 0F56                     l1505 0D62  
                   l1521 0F08                     l1513 0EEC                     l1601 0DE2  
                   l1097 0F5A                     l1507 0D66                     l1515 0EEE  
                   l1603 0DE6                     l1531 0ED0                     l1523 0EBA  
                   l1611 0E62                     l1621 09CC                     l1517 0EFA  
                   l1509 0EE4                     l1605 0DF2                     l1533 0ED2  
                   l1525 0EBC                     l1613 0E64                     l1701 06A8  
                   l1551 0C64                     l1543 0C3A                     l1615 09DE  
                   l1519 0EFC                     l1535 0EDE                     l1527 0EC2  
                   l1607 0E3E                     l1631 0D0A                     l1623 0CB0  
                   l1711 06EC                     l1703 06AE                     l1641 0B04  
                   l1633 0AE6                     l1561 0C98                     l1553 0C72  
                   l1545 0C42                     l1617 0AD4                     l1529 0EC4  
                   l1609 0E46                     l1537 0F0C                     l1625 0CCE  
                   l1721 077A                     l1713 06FE                     l1705 06BA  
                   l1651 0B38                     l1643 0B12                     l1635 0AEA  
                   l1563 0C9E                     l1555 0C78                     l1547 0C54  
                   l1571 0DA0                     l1619 08D6                     l1491 0D3E  
                   l1483 0D1A                     l1539 0F28                     l1627 0CEA  
                   l1731 07BE                     l1723 078C                     l1715 0730  
                   l1707 06D4                     l1661 0B72                     l1653 0B40  
                   l1645 0B1A                     l1637 0AF8                     l1805 0BDC  
                   l1581 0BAC                     l1557 0C8E                     l1549 0C5C  
                   l1573 0DAE                     l1565 0D7E                     l1493 0D42  
                   l1485 0D26                     l1629 0CF2                     l1741 07FA  
                   l1733 07CE                     l1725 0790                     l1717 0762  
                   l1709 06E0                     l1671 0B98                     l1663 0B7A  
                   l1655 0B48                     l1647 0B1E                     l1639 0B00  
                   l1583 0BB0                     l1591 0BC8                     l1559 0C96  
                   l1575 0DC4                     l1567 0D90                     l1487 0D2A  
                   l1751 0838                     l1743 080A                     l1735 07D4  
                   l1727 0794                     l1719 0768                     l1673 0BA0  
                   l1665 0B7C                     l1657 0B56                     l1649 0B26  
                   l1593 0C0A                     l1585 0BB8                     l1577 0DCC  
                   l1569 0D98                     l1497 0D56                     l1761 086C  
                   l1753 0848                     l1745 081A                     l1737 07E4  
                   l1729 07AE                     l1681 0676                     l1667 0B82  
                   l1659 0B5C                     l1587 0BC0                     l1579 0DD2  
                   l1771 088C                     l1763 086E                     l1755 084A  
                   l1747 0820                     l1739 07F4                     l1691 068A  
                   l1683 067A                     l1669 0B88                     l1781 08AA  
                   l1773 0892                     l1765 087E                     l1757 085A  
                   l1749 0832                     l1693 068E                     l1685 067E  
                   l1677 063C                     l1783 08B0                     l1775 0898  
                   l1767 0880                     l1759 085C                     l1695 0692  
                   l1687 0682                     l1679 0672                     l1785 08B6  
                   l1777 089E                     l1769 0886                     l1697 0696  
                   l1689 0686                     l1787 08BC                     l1779 08A4  
                   l1699 069C                     l1789 08C2                     STR_1 0633  
                   STR_2 0601                     STR_3 0612                     STR_4 0623  
                   STR_5 062B                     u1000 0DC4                     u1001 0DC0  
                   u1010 0C0A                     u1011 0C06                     u1101 0646  
                   u1030 0E8C                     u1031 0E88                     u1111 0658  
                   u1040 0AF8                     u1200 0832                     u1041 0AF4  
                   u1025 0C12                     u1201 082E                     u1121 066A  
                   u1050 0B12                     u1210 0848                     u1130 06D4  
                   u1051 0B0E                     u1211 0844                     u1131 06D0  
                   u1060 0B38                     u1220 085A                     u1140 07BE  
                   u1061 0B34                     u1221 0856                     u1141 07BA  
                   u1070 0B56                     u1230 086C                     u1150 07CE  
                   u1071 0B52                     u1231 0868                     u1151 07CA  
                   u1080 0B72                     u1240 087E                     u1160 07E4  
                   u1081 0B6E                     u1241 087A                     u1161 07E0  
                   u1090 0B98                     u1170 07F4                     u1091 0B94  
                   u1171 07F0                     u1180 080A                     u1181 0806  
                   u1190 081A                     u1191 0816                     _main 063C  
                   _itoa 09DE                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000             ___param_bank 000000  
                  ?_main 0001                    ?_itoa 0015          __end_of___awdiv 0BAA  
        ___awdiv@divisor 0003          __end_of___lwdiv 0CAE          __end_of___lwmod 0DE2  
        ___awdiv@counter 0005                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82                    _PORTD 000F83                    _PORTE 000F84  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96          __end_of_lcd_dat 0EE2  
        __end_of_lcd_cmd 0F0C          __end_of_lcd_str 0E8E                    _itoa1 08D6  
                  tablat 000FF5          __end_of_pwmSet1 0D1A          __end_of_pwmInit 0F66  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
        __initialization 0E8E             __end_of_main 08D6             __end_of_itoa 0AE6  
                 ??_main 001A                   ??_itoa 0019            __activetblptr 000002  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 ?_itoa1 0015                   _ADRESH 000FC4                   _ADRESL 000FC3  
          main@mediaTemp 0049         ___awdiv@dividend 0001         __end_of_adc_init 0F74  
       __end_of_lcd_init 0E3E                   ___wmul 0F0C                ??___awdiv 0005  
              ??___lwdiv 0012                ??___lwmod 0005                   _lcd_wr 0F74  
       ___awdiv@quotient 0007                   isa$std 000001                ??_lcd_dat 0007  
              ??_lcd_cmd 0007                ??_lcd_str 000A             __pdataCOMRAM 004A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_pwmSet1 0015                ??_pwmInit 0001  
             __accesstop 0080  __end_of__initialization 0EAE            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_itoa1 09DE                  ??_itoa1 0019  
     __size_of_atraso_ms 0064                  ?___wmul 0008            ??_adc_amostra 0003  
                ?_lcd_wr 0001                ?_adc_init 0001                ?_lcd_init 0001  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 0AE6  
        __size_of___wmul 0026                  ___lwdiv 0C3A                  ___lwmod 0D7E  
      __end_of_atraso_ms 0D7E             __psmallconst 0600          __size_of_lcd_wr 0008  
                __pcinit 0E8E                  __ramtop 0600               ??_adc_init 0001  
                __ptext0 063C                  __ptext1 0CAE                  __ptext2 0F0C  
                __ptext3 0F52                  __ptext4 0E3E                  __ptext5 0EB8  
                __ptext6 0DE2                  __ptext7 0EE2                  __ptext8 0F74  
                __ptext9 0D1A                  _lcd_dat 0EB8                  _lcd_cmd 0EE2  
                _lcd_str 0E3E      __end_of_adc_amostra 0C3A                  _pwmSet1 0CAE  
                _pwmInit 0F52               ??_lcd_init 0008                  main@str 003F  
   end_of_initialization 0EAE                  itoa@val 0015            __Lmediumconst 0000  
                itoa@str 0017                  postdec1 000FE5                  postinc0 000FEE  
              _PORTBbits 000F81                _PORTCbits 000F82                _PORTEbits 000F84  
              _TRISCbits 000F94               lcd_dat@val 0007               lcd_cmd@val 0007  
             lcd_str@str 0008              _adc_amostra 0BAA               atraso_ms@i 0003  
             atraso_ms@j 0005               atraso_ms@k 0006           __end_of___wmul 0F32  
          __pidataCOMRAM 0F32           __end_of_lcd_wr 0F7C      start_initialization 0E8E  
               ??___wmul 000C                 ??_lcd_wr 0001        __size_of_adc_init 000E  
      __size_of_lcd_init 005C         ___lwdiv@dividend 000E                 ?___awdiv 0001  
               ?___lwdiv 000E                 ?___lwmod 0001                 ?_lcd_dat 0001  
               ?_lcd_cmd 0001                 ?_lcd_str 0008                _atraso_ms 0D1A  
            __smallconst 0600                 ?_pwmSet1 0001                 ?_pwmInit 0001  
       ___lwdiv@quotient 0012           __size_of_itoa1 0108           atraso_ms@valor 0001  
         ___wmul@product 000C                main@F2570 004A                main@F2572 0056  
              main@F2568 0060               pwmSet1@val 0018               _ADCON0bits 000FC2  
      ___wmul@multiplier 0008               ?_atraso_ms 0001                lcd_wr@val 0001  
              main@temp1 0047                main@temp2 0048                main@text6 0030  
              main@text7 001A                main@text8 0026                copy_data0 0EA2  
              itoa1@val1 0015                itoa1@str1 0017                 __Hrparam 0000  
               __Lrparam 0000             ?_adc_amostra 0001         __size_of___awdiv 00C4  
       __size_of___lwdiv 0074         __size_of___lwmod 0064          pwmSet1@porcento 0017  
               _adc_init 0F66         __size_of_lcd_dat 002A         __size_of_lcd_cmd 002A  
       __size_of_lcd_str 0050          ___lwdiv@divisor 0010          ___lwdiv@counter 0014  
               __ptext10 08D6                 __ptext11 09DE                 __ptext12 0D7E  
               __ptext13 0C3A                 __ptext14 0F66                 __ptext15 0BAA  
               __ptext16 0AE6         __size_of_pwmSet1 006C         __size_of_pwmInit 0014  
               _lcd_init 0DE2            __size_of_main 029A            __size_of_itoa 0108  
               isa$xinst 000000                 lcd_str@i 000C                 main@tmp1 0045  
               main@tmp2 0046                 main@str1 0039              ??_atraso_ms 0003  
       ___lwmod@dividend 0001          ___lwmod@divisor 0003          ___lwmod@counter 0005  
       adc_amostra@canal 0007  
